<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Guto@Site</title>
    <link href="https://gutocarvalho.net/feed.xml" rel="self" />
    <link href="https://gutocarvalho.net" />
    <updated>2021-10-15T05:48:03-03:00</updated>
    <author>
        <name>Guto Carvalho</name>
    </author>
    <id>https://gutocarvalho.net</id>

    <entry>
        <title>DROPS: Fazer Port Forward no K8S é fácil :)</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/k8s-port-forward-facil/"/>
        <id>https://gutocarvalho.net/k8s-port-forward-facil/</id>
            <category term="K8S"/>
            <category term="Drops"/>

        <updated>2021-10-15T05:48:03-03:00</updated>
            <summary>
                <![CDATA[
                    Aprenda a se conectar em um serviço K8S sem exposição! São DUMPs&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Aprenda a se conectar em um serviço K8S sem exposição!</p>
<h3 id="o-que-são-drops">O que são drops?</h3>
<p>São DUMPs mentais rápidos e rasteiros, simples e objetivos – que funcionam. </p>
<p>Geralmente de algo que eu acabei de fazer.</p>
<p>Eu – quase sempre – volto para detalhar mais cada passo.</p>
<p>Considere com a mesma qualidade de um rascunho ou uma anotação rápida.</p>
<p>De qualquer forma comenta ai qquer coisa, os comentários estão ligados nos DROPS ;)</p>
<h3 id="demanda">Demanda!</h3>
<p>Preciso me conectar em um Mongo no cluster sem expor ele para o mundo?</p>
<h3 id="comofaz">Comofaz?</h3>
<p>Vamos usar o port-forward, veja como a sintaxe é simples</p>
<pre><code>kubectl nome_do_pod porta_local:portal_cluster -n seuname_space
</code></pre>
<p>Exemplo!</p>
<pre><code>kubectl mongodb-replicaset-0 28015:27017 -n seuname_space
</code></pre>
<p>Prontinho!</p>
<h3 id="refs">Refs</h3>
<ul>
<li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/">https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/</a></li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>DROPS: Baixando imagens de ECR Privado no K8S</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/baixando-imagens-de-ecr-privado-no-k8s/"/>
        <id>https://gutocarvalho.net/baixando-imagens-de-ecr-privado-no-k8s/</id>
            <category term="K8S"/>
            <category term="Drops"/>

        <updated>2021-10-14T12:52:10-03:00</updated>
            <summary>
                <![CDATA[
                    Aprenda a pegar imagens de registry ECR privado em seu cluster K8S.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Aprenda a pegar imagens de registry ECR privado em seu cluster K8S.</p>
<hr>
<h3 id="o-que-são-drops">O que são drops?</h3>
<p>São DUMPs mentais rápidos e rasteiros, simples e objetivos – que funcionam. </p>
<p>Geralmente de algo que eu acabei de fazer.</p>
<p>Eu – quase sempre – volto para detalhar mais cada passo.</p>
<p>Considere com a mesma qualidade de um rascunho ou uma anotação rápida.</p>
<p>De qualquer forma comenta ai qquer coisa, os comentários estão ligados nos DROPS ;)</p>
<h3 id="demanda">Demanda!</h3>
<p>Precisamos cadastrar um secret para pegar imagens de um ECR privado</p>
<h3 id="comofaz">ComoFaz?</h3>
<p>Primeiro vamos gerar o TOKEN, você precisa do AWS CLI para isso,</p>
<pre><code>aws configure
</code></pre>
<p>depois de configurado gere o TOKEN</p>
<pre><code>aws ecr get-login-password --region us-east-1
</code></pre>
<p>agora vamos no K8S criar o secret</p>
<pre><code>kubectl create secret docker-registry ecr-nativetrail \
  --docker-server=ID.dkr.ecr.us-east-1.amazonaws.com/ \
  --docker-username=AWS \
  --docker-password=SEU_TOKEN_GERADO_VIA_AWS_CLI \
  --namespace=SEU_NAMESPACE
</code></pre>
<p>verifique</p>
<pre><code>kubectl get secrets -n SEU_NAMESPACE|grep ecr
</code></pre>
<p>saída</p>
<pre><code>ecr-nativetrail kubernetes.io/dockerconfigjson        1      15h
</code></pre>
<p>Nao se esqueça de setar o secret no seu manifesto de deployment, dentro de “spec” </p>
<pre><code>      spec:
        imagePullSecrets:
        - name: ecr-nativetrail
</code></pre>
<p>Exemplo</p>
<pre><code>  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: app-example
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: app-example
    template:
      metadata:
        labels:
          app: nativetrail
      spec:
        imagePullSecrets:
        - name: ecr-nativetrail
        containers:
        - name: app-examp;e
          image:  ID.dkr.ecr.us-east-1.amazonaws.com/app:latest
</code></pre>
<p>Prontinho!</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>DROPS: Storage EBS em seu Cluster K8S EC2</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/storageclass-ebs-em-seu-cluster-k8s-ec2/"/>
        <id>https://gutocarvalho.net/storageclass-ebs-em-seu-cluster-k8s-ec2/</id>
            <category term="K8S"/>
            <category term="Drops"/>

        <updated>2021-10-15T05:46:47-03:00</updated>
            <summary>
                <![CDATA[
                    Aprenda a usar o storage EBS como SC em seu cluster EC2!&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Aprenda a usar o storage EBS como SC em seu cluster EC2!</p>
<hr>
<h3 id="o-que-são-drops">O que são drops?</h3>
<p>São DUMPs mentais rápidos e rasteiros, simples e objetivos – que funcionam. </p>
<p>Geralmente de algo que eu acabei de fazer.</p>
<p>Eu – quase sempre – volto para detalhar mais cada passo.</p>
<p>Considere com a mesma qualidade de um rascunho ou uma anotação rápida.</p>
<p>De qualquer forma comenta ai qquer coisa, os comentários estão ligados nos DROPS ;)</p>
<h3 id="vamos-lá">Vamos lá!</h3>
<p>crie o arquivo aws-ebs-secrets.yaml</p>
<pre><code>vim ws-ebs-secrets.yaml
</code></pre>
<p>insira o conteúdo abaixo, e ajuste suas credenciais</p>
<pre><code>apiVersion: v1
kind: Secret
metadata:
  name: aws-secret
  namespace: kube-system
stringData:
  key_id: &quot;SUA_ACCESS_KEY&quot;
  access_key: &quot;SUA_SECRET_KEY&quot;
</code></pre>
<p>aplique o manifesto</p>
<pre><code>kubectl apply -f aws-ebs-secrets.yaml
</code></pre>
<p>agora instale o driver ebs</p>
<pre><code>kubectl apply -k &quot;github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.4&quot;
</code></pre>
<p>saída esperada</p>
<pre><code>serviceaccount/ebs-csi-controller-sa created
serviceaccount/ebs-csi-node-sa created
clusterrole.rbac.authorization.k8s.io/ebs-csi-node-role created
clusterrole.rbac.authorization.k8s.io/ebs-external-attacher-role created
clusterrole.rbac.authorization.k8s.io/ebs-external-provisioner-role created
clusterrole.rbac.authorization.k8s.io/ebs-external-resizer-role created
clusterrole.rbac.authorization.k8s.io/ebs-external-snapshotter-role created
clusterrolebinding.rbac.authorization.k8s.io/ebs-csi-attacher-binding created
clusterrolebinding.rbac.authorization.k8s.io/ebs-csi-node-getter-binding created
clusterrolebinding.rbac.authorization.k8s.io/ebs-csi-provisioner-binding created
clusterrolebinding.rbac.authorization.k8s.io/ebs-csi-resizer-binding created
clusterrolebinding.rbac.authorization.k8s.io/ebs-csi-snapshotter-binding created
deployment.apps/ebs-csi-controller created
poddisruptionbudget.policy/ebs-csi-controller created
daemonset.apps/ebs-csi-node created
csidriver.storage.k8s.io/ebs.csi.aws.com created
</code></pre>
<p>verifique se tá tudo bem</p>
<pre><code>kubectl get pods -n kube-system|grep ebs
</code></pre>
<p>saída esperada</p>
<pre><code>ebs-csi-controller-7c486f7676-826ph        6/6     Running     0          110s
ebs-csi-controller-7c486f7676-l5wsg        6/6     Running     0          110s
ebs-csi-node-5q7lk                         3/3     Running     0          108s
ebs-csi-node-cxv4p                         3/3     Running     0          109s
ebs-csi-node-fskfw                         3/3     Running     0          108s
</code></pre>
<p>tá tudo bem, agora crie o manifesto do storageclass</p>
<pre><code>vim ebs-storageclass.yaml
</code></pre>
<p>insira o conteúdo abaixo</p>
<pre><code>kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ebs-storageclass
parameters:
  type: gp2
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
</code></pre>
<p>aplique o manifesto</p>
<pre><code>kubectl apply -f ebs-storageclass.yaml
</code></pre>
<p>verifique se criou o sc</p>
<pre><code>kubectl get sc
</code></pre>
<p>saída esperada</p>
<pre><code>NAME                         PROVISIONER       RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
ebs-storageclass             ebs.csi.aws.com   Delete          WaitForFirstConsumer   false                  3m24s
</code></pre>
<p>caso queira, defina este sc como default</p>
<pre><code>  kubectl patch storageclass ebs-storageclass -p &#39;{&quot;metadata&quot;: {&quot;annotations&quot;:{&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;}}}
</code></pre>
<p>prontinho! :)</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>DROPS: Criando um eks básico via terraform</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/drops-criando-um-eks-basico-via-terraform/"/>
        <id>https://gutocarvalho.net/drops-criando-um-eks-basico-via-terraform/</id>
            <category term="Drops"/>

        <updated>2021-10-11T07:47:30-03:00</updated>
            <summary>
                <![CDATA[
                    Aprenda a criar um cluster EKS básico via Terraform! Só vem :”)&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Aprenda a criar um cluster EKS básico via Terraform! Só vem :”)</p>
<h3 id="o-que-são-drops">O que são drops?</h3>
<p>São DUMPs mentais rápidos e rasteiros, simples e objetivos – que funcionam. </p>
<p>Geralmente eu volto para detalhar mais cada passo – com o devido tempo.</p>
<p>Considere com a mesma qualidade de um rascunho ou uma anotação rápida.</p>
<p>De qualquer forma comenta ai qquer coisa, os comentários estão ligados nos DROPS ;)</p>
<hr>
<h3 id="requisitos">requisitos</h3>
<p>Tenha kubeclt e helm instalados.</p>
<p>Tenha o awscli e aws-iam-authenticator instalados.</p>
<p>Esteja logado com aws-cli na conta correta com permissoes para criar o EKS.</p>
<p>Quais permissões?</p>
<ul>
<li><a href="https://github.com/terraform-aws-modules/terraform-aws-eks/blob/master/docs/iam-permissions.md">https://github.com/terraform-aws-modules/terraform-aws-eks/blob/master/docs/iam-permissions.md</a></li>
</ul>
<h3 id="crie-um-diretório-para-seu-projeto">crie um diretório para seu projeto</h3>
<pre><code>mkdir -p terraform/eks/meucluster
cd terraform/eks/meucluster
</code></pre>
<h3 id="crie-o-arquivo-para-definir-as-versões-dos-módulos">crie o arquivo para definir as versões dos módulos</h3>
<p>edite o arquiovo</p>
<pre><code>vim defaults.tf
</code></pre>
<p>insira o conteúdo abaixo para definir der forma clara as versões que vamos usar</p>
<pre><code>terraform {
  required_version = &quot;&gt;= 0.13.1&quot;

  required_providers {
    aws        = &quot;&gt;= 3.62.0&quot;
    local      = &quot;&gt;= 2.1.0&quot;
    kubernetes = &quot;&gt;= 2.5.0&quot;
    cloudinit  = &quot;&gt;= 2.2.0&quot;
    http = {
      source  = &quot;terraform-aws-modules/http&quot;
      version = &quot;&gt;= 2.4.1&quot;
    }
  }
}

provider &quot;aws&quot; {
  region  = &quot;us-east-1&quot;
}

data &quot;aws_caller_identity&quot; &quot;current&quot; {} # used for accesing Account ID and ARN
</code></pre>
<p>valide</p>
<pre><code>terraform validate
</code></pre>
<p>saída esperada</p>
<pre><code>Success! The configuration is valid.
</code></pre>
<h3 id="crie-o-arquivo-com-as-variáveis-que-vão-configurar-a-vpc-e-o-eks">crie o arquivo com as variáveis que vão configurar a vpc e o eks</h3>
<p>crie o arquivo</p>
<pre><code>vim configs.tfvars
</code></pre>
<p>coloque o conteúdo</p>
<pre><code>## configuracoes para vpc

cluster_name            = &quot;hackathon&quot;
name_prefix             = &quot;hackathon&quot;
main_network_block      = &quot;10.0.0.0/16&quot;
subnet_prefix_extension = 4
zone_offset             = 8

## configuracoes para eks

eks_cluster_version = &quot;1.21&quot;

node_group_default_disk_size = 30
node_group_default_ami_type = &quot;AL2_x86_64&quot;
    
node_group_desired_capacity = 1
node_group_max_capacity = 8
node_group_min_capacity = 1
node_group_max_unavailable_percentage = 50
    
node_group_capacity_type = &quot;ON_DEMAND&quot;
node_group_instance_type = &quot;t3.large&quot;
</code></pre>
<p>valide</p>
<pre><code>terraform validate
</code></pre>
<p>saída esperada</p>
<pre><code>Success! The configuration is valid.
</code></pre>
<h3 id="crie-o-manifesto-que-vai-criar-e-configurar-a-vpc">crie o manifesto que vai criar e configurar a VPC</h3>
<p>vamos criar agora a vpc</p>
<pre><code>vim vpc.tl
</code></pre>
<p>insira o conteúdo abaixo</p>
<pre><code># Declarando variaveis

variable &quot;cluster_name&quot; {
  type        = string
  description = &quot;Nome do Cluster&quot;
}

variable &quot;name_prefix&quot; {
  type        = string
  description = &quot;Prefixo que será utilizado nos nomes dos objetos de infraestrutura criados na AWS&quot;
}

variable &quot;main_network_block&quot; {
  type        = string
  description = &quot;Bloco CIDR base que sera usado em sua VPC&quot;
}

variable &quot;subnet_prefix_extension&quot; {
  type        = number
  description = &quot;Bits de extensao do seu bloco CIDR que sera usado para calcular as suberedes&quot;
}

variable &quot;zone_offset&quot; {
  type        = number
  description = &quot;Offset de extensao dos bits CIDR para calculo e subnets, para evitar colisoes entre redes publicas e privadas&quot;
}

# Fixando o IP do Nat Gateway

resource &quot;aws_eip&quot; &quot;nat_gw_elastic_ip&quot; {
  vpc = true
  tags = {
    Name            = &quot;${var.cluster_name}-nat-eip&quot;
  }
}

# Criando a VPC usando configs do modulo oficial AWS

module &quot;vpc&quot; {
  source  = &quot;terraform-aws-modules/vpc/aws&quot;

  name = &quot;${var.name_prefix}-vpc&quot;
  cidr = var.main_network_block
  azs  = [ &quot;us-east-1a&quot;, &quot;us-east-1b&quot;, &quot;us-east-1c&quot;, &quot;us-east-1d&quot; ]

  private_subnets      = [&quot;10.0.1.0/24&quot;, &quot;10.0.2.0/24&quot;, &quot;10.0.3.0/24&quot;, &quot;10.0.4.0/24&quot; ]
  public_subnets       = [&quot;10.0.5.0/24&quot;, &quot;10.0.6.0/24&quot;, &quot;10.0.7.0/24&quot;, &quot;10.0.8.0/24&quot; ]

  enable_nat_gateway     = true
  single_nat_gateway     = true
  one_nat_gateway_per_az = false
  enable_dns_hostnames   = true
  reuse_nat_ips          = true
  external_nat_ip_ids    = [aws_eip.nat_gw_elastic_ip.id]

  # Adicionando tags necessarias para o EKS

  tags = {
    &quot;kubernetes.io/cluster/${var.cluster_name}&quot; = &quot;shared&quot;
  }
  public_subnet_tags = {
    &quot;kubernetes.io/cluster/${var.cluster_name}&quot; = &quot;shared&quot;
    &quot;kubernetes.io/role/elb&quot;                    = &quot;1&quot;
  }
  private_subnet_tags = {
    &quot;kubernetes.io/cluster/${var.cluster_name}&quot; = &quot;shared&quot;
    &quot;kubernetes.io/role/internal-elb&quot;           = &quot;1&quot;
  }
}
</code></pre>
<p>valide</p>
<pre><code>terraform validate
</code></pre>
<p>saída esperada</p>
<pre><code>Success! The configuration is valid.
</code></pre>
<h3 id="crie-o-manifesto-que-vai-configurar-o-eks">crie o manifesto que vai configurar o eks</h3>
<p>crie o arquivo</p>
<pre><code>vim eks.tf
</code></pre>
<p>coloque o conteúdo</p>
<pre><code># declarando variáveis

variable &quot;eks_cluster_version&quot; {
  type        = string
}

variable &quot;node_group_default_disk_size&quot; {
  type        = number
}

variable &quot;node_group_default_ami_type&quot; {
  type        = string
}

variable &quot;node_group_desired_capacity&quot; {
  type        = number
}

variable &quot;node_group_max_capacity&quot; {
  type        = number
}

variable &quot;node_group_min_capacity&quot; {
  type        = number
}

variable &quot;node_group_max_unavailable_percentage&quot; {
  type        = number
}

variable &quot;node_group_capacity_type&quot; {
  type        = string
}

variable &quot;node_group_instance_type&quot; {
  type        = string
}


# dados para configuracao

data &quot;aws_eks_cluster&quot; &quot;eks&quot; {
  name = module.eks.cluster_id
}

data &quot;aws_eks_cluster_auth&quot; &quot;eks&quot; {
  name = module.eks.cluster_id
}

# configurando provider kubernetes

provider &quot;kubernetes&quot; {
  host                   = data.aws_eks_cluster.eks.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.eks.certificate_authority[0].data)
  token                  = data.aws_eks_cluster_auth.eks.token
}

# configurando eks

module &quot;eks&quot; {
  source          = &quot;terraform-aws-modules/eks/aws&quot;

  cluster_version = var.eks_cluster_version
  cluster_name    = &quot;${var.cluster_name}&quot;

  subnets = module.vpc.private_subnets
  vpc_id  = module.vpc.vpc_id

 node_groups_defaults = {
    ami_type  = var.node_group_default_ami_type
    disk_size = var.node_group_default_disk_size
  }

  node_groups = {
    hacka_node_group = {
      desired_capacity = var.node_group_desired_capacity
      max_capacity     = var.node_group_max_capacity
      min_capacity     = var.node_group_min_capacity

      instance_types = [ var.node_group_instance_type ]
      capacity_type  = var.node_group_capacity_type
      update_config = {
        max_unavailable_percentage = var.node_group_max_unavailable_percentage
      }
    }
  }

}
</code></pre>
<p>valide</p>
<pre><code>terraform validate
</code></pre>
<p>saída esperada</p>
<pre><code>Success! The configuration is valid.
</code></pre>
<h3 id="crie-o-plano-de-instalação">crie o plano de instalação</h3>
<p>Use o arquivo configs.tfvars para construir o plano</p>
<pre><code>terraform plan -out=plan -var-file=configs.tfvars;
</code></pre>
<p>saída esperada</p>
<pre><code>.
.
.

Plan: 54 to add, 0 to change, 0 to destroy.
</code></pre>
<h3 id="aplique-o-plano-criado">aplique o plano criado</h3>
<p>vamos aplicar agora</p>
<pre><code>terraform apply plan
</code></pre>
<p>saída esperada</p>
<pre><code>.
.
.
Apply complete! Resources: 54 added, 0 changed, 0 destroyed.
</code></pre>
<h3 id="validando-o-acesso-ao-cluster">validando o acesso ao cluster</h3>
<p>carregue o kubconfig</p>
<pre><code>export KUBECONFIG=kubeconfig
kubectl cluster-info
</code></pre>
<p>saída esperada</p>
<pre><code>Kubernetes control plane is running at https://xxxx.gr7.us-east-1.eks.amazonaws.com
CoreDNS is running at https://xxx.gr7.us-east-1.eks.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;.
</code></pre>
<p>verifique os nodes</p>
<pre><code>kubectl get nodes
</code></pre>
<p>saída esperada</p>
<pre><code>NAME                        STATUS   ROLES    AGE     VERSION
ip-10-xx-xx-xx.ec2.internal   Ready    &lt;none&gt;   3m11s   v1.21.2-eks-55daa9d
</code></pre>
<p>Parece tudo ok!</p>
<p>Agora vai na AWS e confere VPC, EKS e o restante ;)    </p>
<h3 id="post-install">post-install</h3>
<p>Agora precisamos instalar o ingress e o cert-manager, vai lá!</p>
<ol>
<li><a href="https://gutocarvalho.net/instalando-ingress-aws-no-k8s-eks/">https://gutocarvalho.net/instalando-ingress-aws-no-k8s-eks/</a></li>
<li><a href="https://gutocarvalho.net/instalando-cert-manager-no-k8s/">https://gutocarvalho.net/instalando-cert-manager-no-k8s/</a></li>
</ol>
<p>Caso precise regerar o kubeconfig</p>
<ul>
<li><a href="https://gutocarvalho.net/gerando-kubeconfig-para-aws-eks/">https://gutocarvalho.net/gerando-kubeconfig-para-aws-eks/</a></li>
</ul>
<p>Bons estudos!</p>
<h3 id="refs">refs</h3>
<ul>
<li><a href="https://registry.terraform.io/modules/terraform-aws-modules/eks/aws/latest">https://registry.terraform.io/modules/terraform-aws-modules/eks/aws/latest</a></li>
<li><a href="https://github.com/terraform-aws-modules/terraform-aws-eks">https://github.com/terraform-aws-modules/terraform-aws-eks</a></li>
<li><a href="https://itnext.io/build-an-eks-cluster-with-terraform-d35db8005963">https://itnext.io/build-an-eks-cluster-with-terraform-d35db8005963</a></li>
<li><a href="https://adamtheautomator.com/terraform-eks-module/">https://adamtheautomator.com/terraform-eks-module/</a></li>
<li><a href="https://github.com/terraform-aws-modules/terraform-aws-eks/blob/master/docs/iam-permissions.md">https://github.com/terraform-aws-modules/terraform-aws-eks/blob/master/docs/iam-permissions.md</a></li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>DROPS: Instalando GitLab Runner Dind no Ubuntu</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/instalando-gitlab-runner-no-ubuntu/"/>
        <id>https://gutocarvalho.net/instalando-gitlab-runner-no-ubuntu/</id>
            <category term="Drops"/>

        <updated>2021-10-11T07:42:11-03:00</updated>
            <summary>
                <![CDATA[
                    <p>Aprenda a instalar o gitlab-runner para rodar docker DIND.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Aprenda a instalar o gitlab-runner para rodar docker DIND.</p>

<p><strong>O que são drops?<br><br></strong>São DUMPs mentais rápidos e rasteiros, simples e objetivos – que funcionam. <br><br>Geralmente eu volto para detalhar mais cada passo – com o devido tempo.<br><br>Considere com a mesma qualidade de um rascunho ou uma anotação rápida.<br><br>De qualquer forma comenta ai qquer coisa, os comentários estão ligados nos DROPS ;)</p>
<hr>
<p><strong>Instalando docker no Ubuntu</strong><br><br><code>curl https://releases.rancher.com/install-docker/19.03.sh | sh</code><br><code>systemctl enable docker</code><br><code>systemctl start docker</code><br><br><strong>Instalando o GitLab Runner no Ubuntu</strong><br><br><code>curl -LJO "https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_amd64.deb"</code><br><code>dpkg -i gitlab-runner_amd64.deb</code><br><code>systemctl enable gitlab-runner</code><br><code>systemctl start gitlab-runner</code><br><br><strong>Registrando um Runner Docker-in-Docker</strong><br><br><code>gitlab-runner register -n \</code><br><code>  --url https://gitlab.com/ \</code><br><code>  --registration-token TOKEN \</code><br><code>  --description "Runner Guto 1" \</code><br><code>  --tag-list docker \</code><br><code>  --executor docker \</code><br><code>  --docker-image "docker:19.03.12" \</code><br><code>  --docker-privileged true \</code><br><code>  --docker-volumes /var/run/docker.sock:/var/run/docker.sock </code><br><strong><br></strong>Crie quantos runners achar necessário, eu costumo reservar 1 vCPU e 1 GB de RAM para cada Runner.<br><br>Um exemplo, se eu subir 4 runners, a VM vai ter 4 vCPUs + 4 GB de RAM só para os Runners, normalmente deixo mais 1 vCPU + 1 GB pro OS e assim fica tranquilo para cenários bem básicos.</p>
<p><strong>Configurando a concorrência do gitlab-runner</strong><br><br>edite o arquivo<br><br><code>vim  /etc/gitlab-runner/config.toml</code><br><br>altere o número de runners concorrentes para a quantidade que você criou.<br><br><code>concurrent = 4</code><br><br>reinicie o runner</p>
<p><code>systemctl restart gitlab-runner</code></p>
<p>ah, tenha certeza que a instância tem recursos que aguentam a demanda de concorrência, tanto do ponto de vista de memória, quanto de processamento e disco.</p>
<p>[s]<br>Guto</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Mesa com regulagem de altura elétrica</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/mesa-com-regulagem-de-altura-eletrica-brasil/"/>
        <id>https://gutocarvalho.net/mesa-com-regulagem-de-altura-eletrica-brasil/</id>
            <category term="MindNotes"/>

        <updated>2021-10-09T18:43:08-03:00</updated>
            <summary>
                <![CDATA[
                    <p>Seguem as opções de standing desk que eu encontrei no Brasil.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Seguem as opções de standing desk que eu encontrei no Brasil.</p>

<p><br><a href="https://slik.com.br/">https://slik.com.br/</a></p>
<p><a href="https://www.geniodesks.com.br">https://www.geniodesks.com.br</a><br><br><a href="https://baherstore.com.br/produto/mesa-reta">https://baherstore.com.br/produto/mesa-reta</a><br><br>Melhor custo/beneficio até agora é a Baherstore.<br><br>[s]<br>Guto</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Iniciando novo projeto solo! </title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/iniciando-novo-projeto-nativetrail/"/>
        <id>https://gutocarvalho.net/iniciando-novo-projeto-nativetrail/</id>
            <category term="Drops"/>

        <updated>2021-10-09T19:25:29-03:00</updated>
            <summary>
                <![CDATA[
                    <p>Conheça a NativeTrail, novo projeto "solo" que estou iniciando.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Conheça a NativeTrail, novo projeto "solo" que estou iniciando.</p>

<p>Pessoal, passando aqui apenas para informar que estou iniciando um novo projeto chamado <a href="https://nativetrail.io" target="_blank" rel="noopener noreferrer">NativeTrail.io</a>, visite o site e conheça os serviços dessa nova consultoria ;)<br><br>[s]<br>Guto</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Instalando Rancher Single Node</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/instalando-rancher-single-node/"/>
        <id>https://gutocarvalho.net/instalando-rancher-single-node/</id>
            <category term="Projetos"/>
            <category term="K8S"/>
            <category term="Drops"/>

        <updated>2021-10-07T23:03:41-03:00</updated>
            <summary>
                <![CDATA[
                    <p>Aprenda a instalar o Rancher Single Node para testes e avaliações.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Aprenda a instalar o Rancher Single Node para testes e avaliações.</p>

<p>Instale o docker<br><br><code>curl https://releases.rancher.com/install-docker/19.03.sh | sh</code></p>
<p>Crie o diretório de dados para o rancher<br><br><code>mkdir /opt/rabcher-data</code><br><br>Instale o Rancher</p>
<p><code>docker run -d --restart=unless-stopped \</code><br><code>  -p 80:80 -p 443:443 \</code><br><code>  --privileged \</code><br><code>  -v /opt/rancher-data:/var/lib/rancher \<br>   rancher/rancher:latest \</code><br><code>  --acme-domain rancher.nativetrail.io</code></p>
<p>Acesse</p>
<p><code><a href="https://rancher.nativetrail.io">https://rancher.nativetrail.io</a></code></p>
<p>Prontinho!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>K8S: Gerando Kubeconfig para AWS EKS</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/gerando-kubeconfig-para-aws-eks/"/>
        <id>https://gutocarvalho.net/gerando-kubeconfig-para-aws-eks/</id>
            <category term="K8S"/>
            <category term="Drops"/>

        <updated>2021-10-06T15:22:21-03:00</updated>
            <summary>
                <![CDATA[
                    <p>Aprenda a gerar o kubeconfig para um cluster EKS</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Aprenda a gerar o kubeconfig para um cluster EKS</p>

<p><strong>Gerando Kubeconfig para AWS EKS</strong><br><br>configurando aws-cli<br><br><code>$ aws configure</code><br>    <br>preencha os dados pedidos<br><br><code>AWS Access Key ID [None]: ACCESS_KEY</code><br><code>AWS Secret Access Key [None]: SECRET_KEY</code><br><code>Default region name [None]: us-east-1</code><br><code>Default output format [None]: json</code><br><br>listando clusters<br><br><code>$ aws eks cluster-list --output table</code><br><br>saída<br><br><code>-----------------------</code><br><code>|    ListClusters     |</code><br><code>+---------------------+</code><br><code>||     clusters      ||</code><br><code>|+-------------------+|</code><br><code>||  homologacao      ||</code><br><code>||  producao         ||</code><br><code>||  desenvolvimento  ||</code><br><code>||  sandbox          ||</code><br><code>|+-------------------+|</code><br><br><br>gerando</p>
<p><code>$ aws eks update-kubeconfig --name labs</code><br><br>saída<br><br><code>Added new context arn:aws:eks:us-east-1:xxxx:cluster/gr1d-labs to /Users/gutocarvalho/projetos/nativetrail/k8s/labs/config</code><br><br>listando clusters<br><br><code>$ export KUBECONFIG=/Users/gutocarvalho/projetos/nativetrail/k8s/labs/config</code><br><code>$ kubectl get nodes</code><br><br>saída<br><br><code>NAME                            STATUS   ROLES    AGE   VERSION</code><br><code>ip-172-xx-xx-11.ec2.internal     Ready    &lt;none&gt;   24m   v1.21.2-eks-55daa9d</code><br><code>ip-172-xx-xx-168.ec2.internal    Ready    &lt;none&gt;   24m   v1.21.2-eks-55daa9d</code><br><code>ip-172-xx-xx-198.ec2.internal    Ready    &lt;none&gt;   24m   v1.21.2-eks-55daa9d</code><br><br>prontinho!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>K8S: Instalando ingress AWS no EKS</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/instalando-ingress-aws-no-k8s-eks/"/>
        <id>https://gutocarvalho.net/instalando-ingress-aws-no-k8s-eks/</id>
            <category term="Projetos"/>
            <category term="K8S"/>
            <category term="Drops"/>

        <updated>2021-10-06T15:22:35-03:00</updated>
            <summary>
                <![CDATA[
                    <p>Aprenda a instalar o ingress-aws no EKS de forma rápida e pontual</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Aprenda a instalar o ingress-aws no EKS de forma rápida e pontual</p>

<p>É importante saber que o cluster EKS não vem com ingress instalado por padrão, então vamos aprender como instalar o INGRESS oficial do projeto do K8S com suporte a ELB e NLB da AWS.<br><br><strong>Instalando Ingress no EKS</strong><br><br>Aqui nesta página teremos a documentação para instalar o ingress<br><br><code>https://kubernetes.github.io/ingress-nginx/deploy/#aws</code><br><br>Instale a última versão estável<br><br><code>$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.3/deploy/static/provider/aws/deploy.yaml</code><br><br>A saída esperada é essa:<br><br><code>namespace/ingress-nginx created</code><br><code>serviceaccount/ingress-nginx created</code><br><code>configmap/ingress-nginx-controller created</code><br><code>clusterrole.rbac.authorization.k8s.io/ingress-nginx created</code><br><code>clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx created</code><br><code>role.rbac.authorization.k8s.io/ingress-nginx created</code><br><code>rolebinding.rbac.authorization.k8s.io/ingress-nginx created</code><br><code>service/ingress-nginx-controller-admission created</code><br><code>service/ingress-nginx-controller created</code><br><code>deployment.apps/ingress-nginx-controller created</code><br><code>ingressclass.networking.k8s.io/nginx created</code><br><code>validatingwebhookconfiguration.admissionregistration.k8s.io/ingress-nginx-admission created</code><br><code>serviceaccount/ingress-nginx-admission created</code><br><code>clusterrole.rbac.authorization.k8s.io/ingress-nginx-admission created</code><br><code>clusterrolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</code><br><code>role.rbac.authorization.k8s.io/ingress-nginx-admission created</code><br><code>rolebinding.rbac.authorization.k8s.io/ingress-nginx-admission created</code><br><code>job.batch/ingress-nginx-admission-create created</code><br><code>job.batch/ingress-nginx-admission-patch created</code><br><br>Prontinho!</p>
            ]]>
        </content>
    </entry>
</feed>
