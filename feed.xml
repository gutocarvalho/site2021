<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Guto@Site</title>
    <link href="https://gutocarvalho.net/feed.xml" rel="self" />
    <link href="https://gutocarvalho.net" />
    <updated>2022-02-12T21:07:55-03:00</updated>
    <author>
        <name>Guto Carvalho</name>
    </author>
    <id>https://gutocarvalho.net</id>

    <entry>
        <title>Boas práticas GIT para pessoas e times</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/boas-praticas-git-para-pessoas-e-times/"/>
        <id>https://gutocarvalho.net/boas-praticas-git-para-pessoas-e-times/</id>
            <category term="MindNotes"/>

        <updated>2022-02-12T21:07:55-03:00</updated>
            <summary>
                <![CDATA[
                    Em especial para Cloud Engineers. Para que seus commits não sejam gravados&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Em especial para Cloud Engineers.</p>
<h2 id="o-básico">O Básico</h2>
<h3 id="1-configure-corretamente-nome-e-e-mail">1. Configure corretamente nome e e-mail</h3>
<p>Para que seus commits <strong>não</strong> sejam gravados com autor “root” e-mail “root@root” configure esses valores iniciais assim que instalar seu GIT.</p>
<pre><code>$ git config --global user.name &quot;Nome Sobrenome&quot;
$ git config --global user.email &quot;email@domain.ext&quot;
</code></pre>
<p>Pode acontecer de ter que mudar de e-mail dependendo do projeto, nesse caso rode isso dentro do diretório do seu projeto para sobrescrever as configurações globais</p>
<pre><code>$ cd meu_projeto/
$ git config user.name &quot;Nome Sobrenome&quot;
$ git config user.email &quot;email@domain.ext&quot;
</code></pre>
<h3 id="2-configure-seu-editor-favorito-globalmente">2. Configure seu editor favorito globalmente</h3>
<p>Eu gosto de usar o VIM</p>
<pre><code> $ git config --global core.editor vim
</code></pre>
<h3 id="3-ative-o-autocorrect">3. Ative o autocorrect</h3>
<p>O autocorrect vai te ajudar nos erros mais comuns, afinal quem nunca digitou git stats o bramch né?</p>
<pre><code>$ git config --global help.autocorrect 10
</code></pre>
<p>olhe um exemplo quando digitamos BRAMCH ao invés de BRANCH</p>
<pre><code>$ git bramch
WARNING: You called a Git command named &#39;bramch&#39;, which does not exist.
Continuing in 1.0 seconds, assuming that you meant &#39;branch&#39;.
dev
prod
* main
</code></pre>
<p>olhe um exemplo quando digitamo STATS ao invés de STATUS</p>
<pre><code>$ git stats
WARNING: You called a Git command named &#39;stats&#39;, which does not exist.
Continuing in 1.0 seconds, assuming that you meant &#39;status&#39;.
On branch gh-pages
nothing to commit, working tree clean
</code></pre>
<p>É bastante útil não é?</p>
<p>O valor <strong>10</strong> declara 10x10 décimos de segundo, o mesmo que 1 segundo e por aí vai. Caso queira que corrija automaticamente sem aguardar, use o valor 1.</p>
<pre><code>$ git config --global help.autocorrect 1
</code></pre>
<p>Dessa forma ele vai digitar o comando para você, veja mais detalhes no link abaixo</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_code_help_autocorrect_code">https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_code_help_autocorrect_code</a></li>
</ul>
<h4 id="como-desligar-o-autocorrect">como desligar o autocorrect?</h4>
<pre><code>$ git config --global --unset help.autocorrect
</code></pre>
<h3 id="4-use-uma-versão-atualizada-do-git">4. Use uma versão atualizada do GIT</h3>
<p>Normalmente o GIT que vem nas distribuições linux é bem antigo então é uma boa ideia atualizar se quer usar recursos mais recentes e versões com mais performance.</p>
<p>Se estiver no mac o Homebrew pode ajudar.</p>
<pre><code>$ brew install git
</code></pre>
<p>Com isso você vai usar a última versão estável.</p>
<h3 id="5-crie-aliases-para-agilizar-seu-trabalho">5. Crie aliases para agilizar seu trabalho</h3>
<p>Atalhos para mais produtividade, o Git oferece aliases para que possamos economizar alguns caracteres, veja como usar</p>
<pre><code>$ git config --global alias.co checkout
$ git co production
Switched to branch &#39;production&#39;
</code></pre>
<p>outro exemplo</p>
<pre><code>$ git config --global alias.st status
$ git st
On branch gh-pages
nothing to commit, working tree clean
</code></pre>
<p>Uma outra forma de criar aliases é editar seu gitconfig e setar manualmengte</p>
<pre><code>$ vim ~/.gitconfig
</code></pre>
<p>Adicione uma sessão com essa</p>
<pre><code>[alias]
    co = checkout
    st = status
</code></pre>
<p>Simples e rápido!</p>
<h2 id="junte-seu-time-e-defina-os-padrões-que-vão-usar">Junte seu time e defina os padrões que vão usar</h2>
<p>Agora que seu GIT já está atualizado e configurado vamos definir algumas coisas.</p>
<h3 id="6-sente-com-seu-time-e-formalize-o-padrão-de-versionamento-que-vão-seguir">6. Sente com seu time e formalize o padrão de versionamento que vão seguir</h3>
<p>Combinar antes é sai mais barato do que arrumar depois, converse com seu time e defina:</p>
<ul>
<li>Convenções comuns</li>
<li>Quais serão e como usar branchs de integração</li>
<li>Quais serão e como usar branchs de features</li>
<li>Quais serão e como usar demais branchs</li>
<li>Padrão de nome de branchs para integração<ul>
<li>feature-xyz, hotfix-xyz, stage, test, prod</li>
</ul>
</li>
<li>Padrão esperado para commit, forma, mensagens </li>
<li>Templates e forma de se fazer merge</li>
<li>Regras gerais do que se deve ou se deve não fazer</li>
</ul>
<p>Eu sugiro que crie um repo git e coloque tudo isso em formato MD, nada melhor do que versionar suas regras :)</p>
<h2 id="boas-práticas-com-branchs">Boas práticas com branchs</h2>
<h3 id="7-use-e-abuse-de-branchs">7. Use e abuse de branchs</h3>
<p>O recurso de branch é fantástico, você pode criar a partir de qualquer uma.</p>
<p>Dicas principais:</p>
<ul>
<li>Evite gravar diretamente na main.</li>
<li>Sempre trabalhe em uma branch separada</li>
<li>Integre sua branch quando finalizar seu trabalho</li>
<li>Apague sua branch depois que tiver terminado</li>
</ul>
<p>Exemplo</p>
<pre><code>$ git branch -u main correcao_criacao_vpc
$ git checkout correcao_criacao_vpc
</code></pre>
<p>Quando terminar seu ticket, apague a branch</p>
<pre><code>$ git branch -D correcao_criacao_vpc
</code></pre>
<h3 id="8-use-branchs-de-integração">8. Use branchs de integração</h3>
<p>Quando estamos trabalhando com integração contínua o uso de <strong>branchs</strong> de <strong>integração</strong> é fundamental, precisamos integrar nosso código com o código de nossos colegas e rodar os testes na pipeline.</p>
<p>Geralmente temos uma branch de integração para <strong>desenvolvimento</strong> e depois vamos promovendo esse código para outras branchs que vão nos ajudar a <strong>fechar a release e publicar</strong>, tudo depende do <strong>git-flow</strong> que seu time acordou e está seguindo.</p>
<h3 id="9-não-escreva-direto-na-branch-main">9. Não escreva direto na branch MAIN</h3>
<p>Evitamos escrever direto na branch <strong>main</strong> pois geralmente é a última versão estável devidamente testada e validada por todos, é de fato a fonte da verdade, portanto, para colocar código lá devemos sempre passar por diversos testes em sua pipeline e revisões de seus colegas.</p>
<h3 id="10-mantenha-sua-feature-branch-atualizada">10. Mantenha sua feature-branch atualizada</h3>
<p>Faça rebases regulares para garantir isso!</p>
<p>Exemplo de atualização da branch main localmente e depois rebase</p>
<pre><code>$ git checkout main
$ git pull
$ git checkout feature-xyz  
$ git rebase main  
</code></pre>
<p>Exemplo de merge do código com a main</p>
<pre><code>$ git checkout main
$ git pull
$ git merge feature-xyz
</code></pre>
<p>Hoje em dia eu quase não faço merge no braço, geralmente uso MR ou PR, depende da ferramenta que estamos usando. </p>
<h3 id="11-de-vez-em-quando-recrie-suas-branchs-de-integração">11. De vez em quando recrie suas branchs de integração</h3>
<p>Isso é legal de fazer para dar uma limpada na coisa toda e começar novamente.</p>
<pre><code>$ git checkout main
$ git branch -D devel
$ git branch -u main devel
</code></pre>
<h3 id="12-limpe-periodicamente-branchs-de-feature">12. Limpe periodicamente branchs de feature</h3>
<p>O ideal é sempre apagar suas branchs de feature ou de teste após finalizar um ticket.</p>
<p>Apesar de ser o ideal, nem sempre lembramos, então de vez em quando é bom olhar e apagar branchs que não estão sendo usadas.</p>
<p>Pode-se até definir um tempo de vida para branchs que não são fixas, e definindo isso podemos até criar uma automação para limpar o repo.</p>
<h2 id="boas-práticas-com-commit">Boas práticas com commit</h2>
<h3 id="13-corrija-as-mensagens-do-seu-commit-se-errar">13. Corrija as mensagens do seu commit se errar</h3>
<p>Caso perceba algum typo na sua mensagem de commit, use o amend para corrigir</p>
<pre><code> $ git commit -v --amend
</code></pre>
<h3 id="14-faça-commits-pontuais-e-objetivos">14. Faça commits pontuais e objetivos</h3>
<p>Evite fazer um commit com dezenas de arquivos, em especial se esses arquivos trazem mais de uma mudança ou correção. Devemos evitar isso pois fica difícil rastrear, entender e revisar o que foi feito no commit.</p>
<p>Prefira fazer commits pequenos e pontuais de algo que está terminado, algo que funciona e que não traga muitas alterações de uma vez só.</p>
<h3 id="15-faça-commits-atômicos-quando-possível">15. Faça commits atômicos quando possível</h3>
<p>Já sabemos que commitar poucas alterações é o melhor caminho, mas dá para ser ainda menor.</p>
<p>Os commits atômicos são aqueles que gravam apenas uma única mudança – ainda que envolva vários arquivos – em um único commit.</p>
<p>É claro que nem sempre dá para fazer, mas é uma prática excelente se conseguir fazer.</p>
<p>A ideia do commit atômico é gravar a menor e mais importante melhoria que voce fez no código, sendo grande suficiente para adicionar algum valor, contudo, pequena o suficiente para ser gerenciada com  flexibilidade.</p>
<p>Se quiser trabalhar dessa forma tenha em mente duas coisas:</p>
<ul>
<li>Trabalhe em uma coisa por vez</li>
<li>Faça alterações pequenas e pontuais</li>
</ul>
<h3 id="16-faça-commits-regulares-e-frequentes">16. Faça commits regulares e frequentes</h3>
<p>Não espere demais!</p>
<p>Algumas pessoas esperam demais até gravar alguma alteração, às vezes ficam ali melhorando algo que já está funcionando, buscando algum tipo de perfeição antes de gravar.</p>
<p>Deixa eu te dizer uma coisa, o git funciona melhor e te ajuda mais quando você grava com frequência ao invés de esperar muitoooo tempo para gravar sua mudança. </p>
<p>Ao gravar com frequência você vai rastrear inclusive como você foi melhorando aquele código ao longo do seu processo e histórico de desenvolvimento.</p>
<p>E lembre-se, o GIT só cuida do seu código depois que você grava, se você fechar o editor por acidente ou se o editor travar, seu código já era, contudo, se estiver commitando com frequência você evita isso.</p>
<h3 id="17-quebre-seu-commit-em-commits-menores">17. Quebre seu commit em commits menores</h3>
<p>As vezes a gente vai trabalhando e se empolga demais, e com isso acaba fazendo mais de uma alteração em um mesmo arquivo, e neste caso,  tais alteraçoes que poderiam ser commitadas de forma separada. Se for esse o caso, o commando abaixo te permite escolher quais mudanças você deseja commitar em um determinado arquivo.</p>
<pre><code>$ git add -p &lt;nome_do_arquivo&gt;
</code></pre>
<p>Assim vamos conseguir commitar pequenas porções do arquivo por vez.</p>
<h3 id="18-não-faça-commit-de-algo-que-você-não-finalizou">18. Não faça commit de algo que você não finalizou</h3>
<p><strong>Nunca</strong>, eu repito, <strong>nunca</strong> grave algo que não está funcionando ou que não está completo.</p>
<h3 id="19-teste-seu-código-antes-de-gravar">19. Teste seu código antes de gravar</h3>
<p>Essa é uma das coisas mais básicas que vou falar hoje, mas tem que falar e tem que fazer.</p>
<p>Caso não saiba, gravar código quebrado é algo bastante incômodo, poderá irritar seus colegas, podendo em alguns casos chegar a ser considerado uma falta de respeito e falta de profissionalismo.</p>
<p>Verifique a sintaxe do seu código, rode um linter e execute o código para ver se o que fez está funcionando, seja uma feature, seja um bugfix, seja um hotfix, afinal, se o código estiver funcionando e se sua solução resolver o ticket, isso será o melhor dos mundos.</p>
<p>O git inclusive oferece um sistema de HOOKS que permite por exemplo, executar comandos de checagem antes de de gravar seu código, nesse caso estou falando do hook “pre-commit”, veja o link abaixo e leia sobre esse e outros hooks, é um recurso muito útil, acredite.</p>
<ul>
<li><a href="https://git-scm.com/docs/githooks">https://git-scm.com/docs/githooks</a></li>
</ul>
<h3 id="20-escreva-mensagens-de-commit-claras">20. Escreva mensagens de commit claras</h3>
<p>As mensagens precisam fazer sentido e ser úteis para todos do time.</p>
<h4 id="201-commitando-em-uma-linha">20.1 Commitando em uma linha</h4>
<p>A mensagem tem que fazer sentido, ser fácil de ler e ser suficiente para entender o que foi feito.</p>
<h5 id="exemplos">Exemplos</h5>
<p>Podemos usar convenções para mostrar que fizemos uma <strong>correção</strong></p>
<pre><code>fix: corrige bug quando modulo vai crair a 2o VPC na AWS
</code></pre>
<p>ou uma <strong>refatoração</strong></p>
<pre><code>refact: refatora código que configura IAM para EKS na AWS
</code></pre>
<p>ou uma <strong>documentação</strong></p>
<pre><code>doc: adiciona docs para uso do modulo IAM/EKS
</code></pre>
<p>ou que inserimos <strong>testes</strong></p>
<pre><code>test: adiciona testes unitários no módulo
    
</code></pre>
<p>ou que criamos uma nova <strong>feature</strong></p>
<pre><code>feat: adiciona recurso para lidar com ALB no EC2/AWS
</code></pre>
<h5 id="entendendo-a-estrutura">Entendendo a estrutura</h5>
<p>É simples</p>
<pre><code>feat: adiciona fature para recursos ALB no EC2/AWS #220412
^--^  ^-----------------------------------------^
|     |
|     +-&gt; Sumário da sua mudança
|
+-------&gt; Tipo: docs, feat, fix, refact, ou test.
</code></pre>
<p>Se você estiver usando um sistema de tickets junto, adicione o número do ticket na mensagem, sistemas como GitLab e GitHub já farão a associação para você entre a issue e o commit.</p>
<p>Evite colocar ponto final na mensagem, afinal é um título.</p>
<p>Vale lembrar que você deve evitar escrever mais de 50 caracteres ou vai quebrar a saída do “git log”.</p>
<h5 id="de-que-modo-escrever-a-mensagem">De que modo escrever a mensagem?</h5>
<p>Em alguns blogs vocês verão pessoas que defendam usar verbos no imperativo ou presente do indicativo, e faz sentido. Em ambos os casos a ideia é que o commit responda essa pergunta:</p>
<pre><code>  &quot;Em caso de aplicar esse commit ele...&quot;
</code></pre>
<p>Resposta</p>
<pre><code>...altera código X
...corrige módulo Y
...refatora manifesto Z
...cria feature W para módulo X
</code></pre>
<p>Eu já gosto de usar particípio do passado, pois foi algo que já foi realizado e nem precisa fazer a perguntinha para ver como tem que escrever, neste caso você pode afirmar ao invés de perguntar, dessa forma:</p>
<pre><code>&quot;Nesse commit foi...&quot;
</code></pre>
<p>Resposta</p>
<pre><code>...alterado código X
...corrigido módulo Y
...refatorado manifesto Z
...criada a feature W para módulo X
</code></pre>
<p>Enfim, existem longas threads sobre isso na internet, quase uma guerra santa, contudo, IMHO isso vai depender de cada um, ou da forma como cada time decidiu trabalhar.</p>
<p>No final o importante é você versionar seu código e conseguir entender o que fez ali lendo a mensagem de commit :)</p>
<h4 id="202-usando-o-editor-para-algo-mais-detalhado">20.2 Usando o editor para algo mais detalhado</h4>
<p>As vezes precisamos escrever um pouco mais, indo além do “one line commit”, especialmente se foi uma correção complexa, se tem alguma pegadinha, ou se for preciso explicar porque você fez aquilo daquela forma. No caso do trabalho e o dia-a-dia dos Cloud Engineers nem sempre é necessário, mas se for, veja como fazer.</p>
<p>Nesse caso, como é uma mensagem longa, não podemos fazer “one line commit”, temos que ir para o editor.</p>
<pre><code>$ git commit
</code></pre>
<p>E escrever a mensagem</p>
<pre><code>Assunto da mensagem com no máximo 50 caracteres, sem ponto final

Descrição em múltiplas linhas
sobre seu commit. Use até 72 caracteres

Outros parágrafos podem vir após inserir 
uma linha em branco
Aqui nao tem mais limite de caracteres

Podemos usar bullets também, ajuda a organizar a informação

- Enumerando
- Alterações
- Realizadas
- Por
- Este
- Commit

Se existe um ticket coloque 
o número dele na mensagem e os tickets relacionados

Esse commit resolve o problema do ticket #2222
E está relacionado com o ticket #3333 e #4444
</code></pre>
<p>É bem simples!</p>
<h3 id="21-não-reescreva-o-histórico-da-branch-principal">21. Não reescreva o histórico da branch principal</h3>
<p>Se você já gravou o código na branch principal, e o código alterado já está disponível para outras pessoas verem, recomenda-se não alterar esse histórico.</p>
<p>Fazer rebase na MAIN ou qualquer que seja o nome da sua branch upstream, ou mesmo em uma branch de integração pode causar problemas para seus colegas e eles podem ter que lidar com conflitos ou ter que fazer stash e baixar toda a branch novamente. Fora que normalmente alterações nessas branchs geralmente acionam gatilhos em ferramentas de CICD, o que pode gerar um deploy com regressão.</p>
<p>Dito isso, muito cuidado com suas branchs, em especial a upstream e as branchs de integração.</p>
<p>Na sua branch de feature você faz o que quiser, use o rebase sem problema algum, mas só nela ok?</p>
<h2 id="boas-práticas-com-merge">Boas práticas com merge</h2>
<h3 id="22-faça-squash-antes-de-fazer-um-merge">22. Faça squash antes de fazer um merge</h3>
<p>Antes de fazer um merge verifique seu histórico de commit, veja se é possível melhorar o histórico, reduzir e juntar algumas coisas, as vezes 20 commits podem ser agrupados em 10, fica mais limpo, organizado e facilitará a revisão por seus pares.</p>
<pre><code>$ git rebase -i HEAD~20  # apresenta os últimos 20 commits para fazer o squash
</code></pre>
<p>Faça o squash na sua branch de trabalho antes de mandar o PR/MR e altere apenas os seus commits ok?</p>
<h3 id="23-use-e-abuse-de-mrs-e-prs-no-github-e-gitlab">23. Use e abuse de MRs e PRs no GitHub e GitLab</h3>
<p>A vantagem de usar PR ou MR seja no GitLab ou GitHub é que você tem facilidades para fazer squash, resolver conflitos, enxergar o que mudou (diff), solicitar revisão de pares, receber comentários e então finalmente fazer o merge. São excelentes recursos e devemos usá-los pois facilitam nossa vida.</p>
<h2 id="outras-coisas-interessantes">Outras coisas interessantes</h2>
<h3 id="24-use-nomes-consistentes-para-seus-remotes">24. Use nomes consistentes para seus remotes</h3>
<p>Origin é um nome padrão, mas não é obrigatório tá?</p>
<pre><code>$ git push origin main
</code></pre>
<p>Podemos mudar esse nome para dar mais contexto e ficar mais claro de qual remote estamos falando</p>
<pre><code>$ git push gitlab main
$ git push github main
$ git push bitbucket main
$ git push clienteX main
</code></pre>
<p>Colocar um contexto no nome do remote ajuda bastante, especialmente se tem vários remotes.</p>
<h3 id="25-prefira-autenticação-ssh-ao-invés-de-usersenha">25. Prefira autenticação SSH ao invés de user/senha</h3>
<p>Autenticação através de chaves é mais segura, tanto que algumas ferramentas como GitHub desabilitam push em outros métodos.</p>
<h4 id="criando-uma-chave-ssh-segura-ed2559">Criando uma chave ssh segura (ed2559)</h4>
<p>Como criar um chave segura?</p>
<pre><code>$ ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/nome_da_sua_chave -C “nome@domain.ext”
</code></pre>
<p>Quer saber por que usar o  ed25519?</p>
<p>Basicamente pois é um algoritmo mais moderno que usa curvas elípiticas, mais performático comparado com outras alternativas.</p>
<p>Se quiser saber mais mergulhe nesse post!</p>
<ul>
<li><a href="https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54">https://medium.com/risan/upgrade-your-ssh-key-to-ed25519-c6e8d60d3c54</a></li>
</ul>
<h4 id="definindo-o-uso-de-chaves-ssh-para-repos-específicos">Definindo o uso de chaves ssh para repos específicos</h4>
<p>No meu caso eu trabalho com várias chaves ssh, uma para projetos pessoais, uma para projetos na empresa que trabalho e sempre crio chaves para projetos ou freelas que eu estou fazendo.</p>
<p>É sempre bom evitar usar a mesma chave para tudo.</p>
<p>Mas como organizar isso?</p>
<p>Simples edite o arquivo ~/.ssh/config e configure a chave para cada server </p>
<pre><code>Host nativeltrail_gitlab
  Hostname gitlab.nativetrail.io
  User git
  IdentityFile ~/.ssh/id_ed2559_gitlab_nativetrail_key

Host client_x_gitlab
  Hostname gitlab.cliente-x.com
  User git
  IdentityFile ~/.ssh/id_ed2559_gitlab_clientex_key
  
Host gitlab
  Hostname gitlab.com
  User git
  IdentityFile ~/.ssh/id_ed2559_gitlab_key 

Host github
  Hostname github.com
  User git
  IdentityFile ~/.ssh/id_ed2559_github_key  
</code></pre>
<p>Pronto, diferentes chaves para diferentes servidores e serviços.</p>
<h3 id="26-use-e-abuse-do-gitignore">26. Use e abuse do .Gitignore</h3>
<p>O Gitignore é um arquivo essencial em nosso repositório, é através dele que dizemos para o GIT ignorar alguns arquivos e não versioná-los.</p>
<p>O Github traz uma bela coleção de templates para isso, veja no link abaixo:</p>
<ul>
<li><a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></li>
</ul>
<h4 id="usando-o-gitignore-local">usando o gitignore local</h4>
<p>neste caso crie na raiz do diretorio um arquivo com o nome .gitignore e insira o que deseja ignorar.</p>
<pre><code>_site
_temp
_build
*.zip
*.tar.gz
</code></pre>
<p>e pronto, seu git vai ignorar esses padroes, saiba mais na documentação:</p>
<ul>
<li><a href="https://git-scm.com/docs/gitignore">https://git-scm.com/docs/gitignore</a></li>
</ul>
<h4 id="usando-o-gitignore-global">usando o gitignore global</h4>
<p>Esse arquivo é global e todos os projetos vão ler ele, é bem útil para coisas comuns e para projetos que ainda não tem um .gitignore construído</p>
<p>Criando o arquivo</p>
<pre><code>$ touch ~/caminho/para/seu/global/.gitignore
</code></pre>
<p>Ativando via CLI</p>
<pre><code>$ git config --global core.excludesFile ~/caminho/para/seu/global/.gitignore
</code></pre>
<p>Caso prefira edite seu .gitconfig diretamente e insira a configuração</p>
<pre><code>[core]
  excludesFile = ~/caminho/para/seu/global/.gitignore
</code></pre>
<p>No mac eu uso esse conteúdo</p>
<pre><code># General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Files that might appear on external disks
.Spotlight-V100
.Trashes

# Vscode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix
</code></pre>
<h3 id="27-use-tags-para-criar-referências-no-seu-histórico">27. Use tags para criar referências no seu histórico</h3>
<p>Tags que identificam milestones</p>
<pre><code>$ git tag milestone-id -m
$ git push --tags
</code></pre>
<p>Tags que identificam um estado</p>
<pre><code>$ git tag stable -m
$ git push --tags
</code></pre>
<p>Tags que identificam versões</p>
<pre><code>$ git tag v1.2.3 -m
$ git push --tags
</code></pre>
<p>Existem várias formas de usar tags, seu uso facilita a identificação de um momento específico em seu histórico de desenvolvimento, tal como o fechamento de uma release, a conclusão de um milestones, a identifição e uma versão, o que possibilita que façamos clone do código naquele momento exato.</p>
<h3 id="28-se-possível-use-versionamento-semântico">28. Se possível use versionamento semântico</h3>
<p>Caso não conheça acessa o site <a href="https://semver.org">https://semver.org</a></p>
<p>O versionamento semântico consiste basicamente no uso de três numeros que podem ser incrementados, como o exemplo abaixo:</p>
<pre><code>2.3.5
</code></pre>
<h5 id="major">MAJOR</h5>
<p>O primeiro número é chamado de <strong>major</strong>, ele deve ser incrementando quando alguma mudança causa uma quebra de compatilidade de API</p>
<h5 id="minor">MINOR</h5>
<p>O segundo número é chamado de <strong>minor</strong>, ele deve ser incrementado quando uma nova funcionalidade é adicionada, sem quebra de compatibilidade</p>
<h5 id="patch">PATCH</h5>
<p>O terceiro número é chamado de <strong>patch,</strong> ele deve ser incrementado quando fazemos algum tipo de correção na versão minor</p>
<h5 id="buildrelease">BUILD/RELEASE</h5>
<p>Ao ler o semver.org você verá outras possibilidades de versionar, usando build number e release name, veja alguns exemplos:</p>
<pre><code>1.0.0-alpha
1.0.0-beta
1.0.0-rc1
1.0.0-rc2
1.0.0+20130313144700
1.0.0-0.3.7
</code></pre>
<p>O versionamento semântico é bem flexível e fácil de usar, você vai ver.</p>
<h4 id="posso-automatizar-o-incremento-de-versão">Posso automatizar o incremento de versão?</h4>
<p>Como as regras são claras fica fácil entender como incrementar a versões manualmente e podemos até mesmo automatizar isso em nossa pipeline.</p>
<h4 id="posso-criar-o-meu-próprio-método">Posso criar o meu próprio método?</h4>
<p>Claro, cada time pode definir seu jeito de versionar, mas lembre-se criar um repo onde você explica isso para todo mundo, em formato MD. :)</p>
<h3 id="29-cuidado-com-push-usando-force">29. Cuidado com Push usando FORCE</h3>
<p>Quando você manda um</p>
<pre><code>$ git push origin main --force
</code></pre>
<p>Você está sobrescrevendo tudo que tem no ORIGIN na branch MAIN.</p>
<p>Todo o cuidado é pouco, se for fazer avise a turma, peça permissão e faça um backup antes.</p>
<h4 id="quais-problemas-isso-pode-gerar">Quais problemas isso pode gerar?</h4>
<p>Se alguém fez um push e você não atualizou sua branch local, os commits do coleginha serão perdidos.</p>
<p>Se alguém fez um clone e você mandou um force removendo várias coisas, no próximo pull o coleginha vai lidar com conflitos ou coisas piores, talvez tenha até que apagar o repo e baixar novamente.</p>
<p>Isso pode gerar algumas situações chatas com seu time, tome cuidado, use com cuidado.</p>
<h3 id="30-aprenda-mais-sobre-o-git-e-pratique">30. Aprenda mais sobre o GIT e pratique</h3>
<p>Aprender, entender e usar boas práticas vem com a experiência do dia a dia, quanto mais ler para conhecer seus recursos, quanto mais usar, mais precisará aprender, é assim que funciona.</p>
<p>Então vai lá e estuda!</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2">https://git-scm.com/book/en/v2</a></li>
</ul>
<p>Sucesso!</p>
<h2 id="refs">Refs</h2>
<ul>
<li><a href="https://deepsource.io/blog/git-best-practices/">https://deepsource.io/blog/git-best-practices/</a></li>
<li><a href="https://opensource.com/article/20/7/git-best-practices">https://opensource.com/article/20/7/git-best-practices</a></li>
<li><a href="https://cbea.ms/git-commit">https://cbea.ms/git-commit</a></li>
<li><a href="https://github.com/git-tips/tips">https://github.com/git-tips/tips</a></li>
<li><a href="https://codeburst.io/git-tips-and-tricks-to-improve-your-git-workflow-3f8652fa4a62">https://codeburst.io/git-tips-and-tricks-to-improve-your-git-workflow-3f8652fa4a62</a></li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Entendendo VCS centralizado e distribuído</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/entendendo-vcs-centralizado-e-distribuido/"/>
        <id>https://gutocarvalho.net/entendendo-vcs-centralizado-e-distribuido/</id>
            <category term="MindNotes"/>

        <updated>2022-02-12T18:42:45-03:00</updated>
            <summary>
                <![CDATA[
                    Essa é outra daquelas perguntinhas marotas de entrevistas, bora entender isso direitinho&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Essa é outra daquelas perguntinhas marotas de entrevistas, bora entender isso direitinho para responder com segurança!</p>
<h2 id="vcs">VCS?</h2>
<p><strong>VCS</strong> significa <strong>version control system</strong>, ou sistema de controle de versões.</p>
<p>O <strong>GIT</strong> é o mais famoso hoje, o qual faz parte do grupo dos <strong>distribuídos</strong>.</p>
<p>Mas qual a diferença entre sistemas <strong>centralizados</strong> e <strong>distribuídos</strong>?</p>
<h2 id="vsc-centralizado">VSC Centralizado</h2>
<p>O sistema centralizado, como o nome diz tem um servidor ou serviço central e funciona na arquitetura <strong>cliente/servidor</strong>. Este servidor tem todas as versões do código.</p>
<p>Para trabalhar em um projeto você precisa instalar o cliente e fazer o download de todo o código e <strong>sempre vai depender do servidor para gravar suas modificações</strong>, se ele não estiver no ar você não consegue fazer seus commits, e isso te impede de trabalhar.</p>
<p>A dependência do serviço no ar para  trabalhar por si só já é algo que pode incomodar, além disso, temos um problema maior ainda, uma vez que todo o código está no servidor, perdeu o servidor, perdeu o código e aí ninguém trabalha mesmo.</p>
<p>Em resumo, se o servidor estiver fora, ninguém faz nada.</p>
<p>Os VCS centralizados podem até ser mais simples de instalar, manter e usar, mas o risco de um ponto único de falha é muito grande para assumir hoje em dia.</p>
<p>Exemplos de sistemas centralizados:</p>
<ul>
<li>SVN</li>
<li>CVS</li>
<li>Perforce</li>
</ul>
<h2 id="vcs-distribuído">VCS Distribuído</h2>
<p>No VCS distribuído <strong>todo mundo tem a cópia do software em sua máquina</strong>, pode trabalhar <strong>localmente</strong> e depois enviar e <strong>integrar</strong> seu código em um repositório intermediário usado para isso, no caso do GIT chamamos esse locais de <strong>remotes</strong>.</p>
<p>Como todo mundo tem o código, <strong>temos múltiplos backups</strong> e caso o repositório de alguém se corrompa, podemos facilmente pegar a cópia de outro desenvolvedor e seguir trabalhando.</p>
<p>Como temos uma cópia local, <strong>podemos trabalhar offline</strong> e depois enviar e integrar o código com dos nossos colegas, e saiba que trabalhar local é bem mais rápido.</p>
<p>A criação de <strong>branchs</strong> é rápida e objetiva pq é tudo local e não precisa contatar um servidor central <strong>toda a vez que for criar uma branch</strong>.</p>
<p>A única coisa que precisa ficar claro é a curva de aprendizado <strong>pode</strong> ser maior do que sistemas mais simples e centralizados, contudo, o poder, a flexibilidade, a segurança e a velocidade de trabalhar superam esse detalhe.</p>
<p>Exemplos de sistemas centralizados:</p>
<ul>
<li><strong>GIT</strong></li>
<li><strong>Mercurial</strong></li>
<li>Bazaar</li>
</ul>
<h2 id="amarrando-as-pontas">Amarrando as pontas</h2>
<p>Hoje o <strong>GIT</strong> se tornou padrão do mercado, todo mundo usa, conhece e sabe trabalhar, contudo, não é incomum encontrar empresas usando Mercurial o segundo mais popular entre os distribuídos.</p>
<p>Espero que tenha te ajudado a entender a diferença :)</p>
<p>[s]<br>
Guto</p>
<p>–</p>
<p>Este post é do tipo #MindNotes, entenda <a href="https://gutocarvalho.net/o-que-sao-mindnotes/">aqui</a>.</p>
<p>Se gostou manda um alo no twitter @gutocarvalho.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Entendendo o que é three tier application</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/entendendo-o-que-e-three-tier-application/"/>
        <id>https://gutocarvalho.net/entendendo-o-que-e-three-tier-application/</id>
            <category term="MindNotes"/>

        <updated>2022-02-10T20:12:13-03:00</updated>
            <summary>
                <![CDATA[
                    Se você está se inscrevendo para vagas de Cloud Engineer ou DevOps&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Se você está se inscrevendo para vagas de Cloud Engineer ou DevOps Engineer esse termo pode aparecer em sua entrevista, vamos entender de forma simples o que é.</p>
<p>É um arquitetura client-server bem conhecida e está organizada da seguinte forma:</p>
<ul>
<li>Presentation Layer (GUI)</li>
<li>Application Layer (Business)</li>
<li>Data Layer (Persistence)</li>
</ul>
<p>Fazendo uma APP seguindo esse modelo nos dias de hoje geraria algo como:</p>
<ul>
<li>Frontend (HTML, JS, CSS)</li>
<li>Backend (Python, C)</li>
<li>Database (PostgreSQL, Mongo)</li>
</ul>
<p>Atualmente seria um <strong>Backend</strong> desenvolvido com a estratégia <strong>API-FIRST</strong>, um <strong>Frontend</strong> leve e moderno usando algum framework <strong>JS</strong> consumindo as <strong>APIs</strong> e <strong>Endpoints</strong> do <strong>Backend</strong> que estará gravando os dados em sistemas <strong>SGBDS</strong> modernos, sendo estes <strong>relacionais</strong> e <strong>não relacionais</strong> de acordo com o tipo de dado e contexto a ser persistido.</p>
<h3 id="quais-as-vantagens">Quais as vantagens?</h3>
<ul>
<li>Pode-se atualizar os componentes de forma separada e independente</li>
<li>Como os componentes são separados, o desenvolvimento é simplificado e independente, podendo inclusive ser feito por times distintos</li>
<li>Podemos trabalhar com objetivo de melhorar a escalabilidade em cada componente de forma independente, o que vai aumentar a resiliência e disponibilidade da aplicação</li>
<li>Teremos mais segurança já que o o frontend nao fala diretamente com o banco</li>
</ul>
<p>Esse é o básico do básico sobre o assunto, mas suficiente para responder.</p>
<h3 id="refs">Refs</h3>
<ul>
<li><a href="https://www.logianalytics.com/5-benefits-3-tier-architecture">https://www.logianalytics.com/5-benefits-3-tier-architecture</a></li>
<li><a href="https://gocloudcareers.com/2021/10/21/what-is-a-three-tier-architecture">https://gocloudcareers.com/2021/10/21/what-is-a-three-tier-architecture</a></li>
<li><a href="https://ipwithease.com/three-tier-architecture-in-application/">https://ipwithease.com/three-tier-architecture-in-application/</a></li>
</ul>
<p>[s]<br>
Guto</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Entendendo diferença entre LB tipo L4 e L7</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/entendendo-diferenca-entre-lb-tipo-l4-e-l7/"/>
        <id>https://gutocarvalho.net/entendendo-diferenca-entre-lb-tipo-l4-e-l7/</id>
            <category term="MindNotes"/>

        <updated>2022-02-11T08:42:38-03:00</updated>
            <summary>
                <![CDATA[
                    A ideia aqui é falar sobre a diferença de Load Balancer (LB)&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>A ideia aqui é falar sobre a diferença de Load Balancer (LB) na camada 4 e 7, perguntinha comum em entrevistas de emprego para quem está disputando uma vaga de Cloud Engineer ou Cloud Architect. Antes de entrar no assunto vamos relembrar algumas coisinhas básicas.</p>
<h2 id="relembrando-do-modelo-osi">Relembrando do Modelo OSI?</h2>
<p>É um modelo referência para comunicação entre sistemas computacionais composto por 7 camadas.</p>
<ul>
<li>Application (HTTP, FTP, SSH, NTP, NFS, SNMP…)</li>
<li>Presentation (SSL, TLS…)</li>
<li>Session Layer (RCP, SOCKS, NetBios…)</li>
<li>Transport (TCP, UDP…)</li>
<li>Network ( IP, IPSEC, ICMP, IGMP, RIP…)</li>
<li>Data Link ( PPP, ARP, WIFI, Ethernet…)</li>
<li>Physical ( 1000BASE-TX, RJ45…)’</li>
</ul>
<p>Só precisa lembrar que é um modelo conceitual e referencial, nunca foi implementado, quem virou realidade foi o TCP/IP que é uma versão mais simples e de alguma forma parecida com esse modelo.</p>
<h2 id="relembrando-o-modelo-tcpip">Relembrando o Modelo TCP/IP</h2>
<p>É um modelo mais enxuto e muito funcional.</p>
<ul>
<li>Application (HTTP, HTTPS, SSH, SSL, TLS…)</li>
<li>Transport (TCP, UDP…)</li>
<li>Internet ( IP, ICMP, IGMP… )</li>
<li>Link ( ARP, NDP… )</li>
</ul>
<p>Esse foi o modelo que se tornou o padrão, sendo o que é usado até hoje.</p>
<h2 id="qual-a-diferença-entre-load-balancer-na-camada-4-ou-7">Qual a diferença entre Load Balancer na camada 4 ou 7?</h2>
<p>Quando fazem essa pergunta estão falando do modelo OSI pq é a única que tem 7 camadas.</p>
<p>A camada 7 é a camada mais alta do modelo OSI, chamada de aplicação, nessa camada no caso do LB estamos falando do HTTP que é o que importa para LB geralmente.</p>
<p>A camada 4 é camada de transporte onde temos o TCP que o que importa quando estamos falando de LB geralmente.</p>
<h3 id="camada-4">Camada 4</h3>
<p>O balanceamento nesta camada leve em conta as informações de endereçamento  de cada pacote – dos primeiros que recebe – para tomar decisões de roteamento, contudo ele não lê ou inspeciona os dados do pacote.</p>
<p>Aqui estamos falando dos dados brutos, estamos falando dos pacotes de fato. Neste cenário o LB vai receber pacotes em uma porta TCP qualquer, por exemplo a 80 e repassar para outro IP na mesma porta ou em outra porta que for definida. O balanceador pode encaminhar pacotes para vários IPs diferentes de acordo com as regras estabelecidas pelo administrador. </p>
<p>Pode-se ainda definir configurações de estratégia de balanceamento como RR (round-robin), persistência de sessão, definir pesos, prioridades, tempo de timeout, nível máximo de tolerância a falhas e outras regras que a tecnologia escolhida oferecer e suportar.</p>
<p>O único tratamento – de fato – que ele vai fazer é um NAT que irá mudar quando necessário o <strong>ip de origem</strong> e o <strong>ip destino</strong> dos pacotes.</p>
<h3 id="camada-7">Camada 7</h3>
<p>Já nesta camada o LB baseia todas as decisões de roteamento usando características e informações presentes nos pacotes, e falando especicamente de HTTP temos o cabeçalho HTTP, o conteúdo da mensagem, a url, o tipo de dados (imagem, texto, áudio, vídeo…) e os cookies. </p>
<p>Além destas informações, o administrador pode definir configurações de estratégia de balanceamento, persistência de sessão, definir pesos, prioridades, tempo de timeout, nível máximo de tolerância a falhas e outras regras que a tecnologia escolhida oferecer e suportar.</p>
<p>E não é só isso, o balanceamento na L7 pode ir além, usando características de reverse-proxys ele permite por exemplo, enviar requisições específicas para um determinado servidor, habilitar compressão de dados (GZIP) e criptografia na comunicação (TLS/SSL), coisas que não podem ser feitas em um LB do tipo L4.</p>
<h2 id="amarrando-as-pontas">Amarrando as pontas</h2>
<p>Sabemos que o custo computacional do L7 é bem maior que o L4, contudo, hoje em dia isso é praticamente imperceptível para a maioria das aplicações e cenários. Só vamos começar a perceber o custo computacional com aplicaçoes de missão crítica ou em sites com acessos na casa dos centenas de milhares por segundo. Ainda assim, os benefícios são maiores IMHO.</p>
<h3 id="refs">Refs</h3>
<ul>
<li><a href="https://www.a10networks.com/blog/how-do-layer-4-and-layer-7-load-balancing-differ">https://www.a10networks.com/blog/how-do-layer-4-and-layer-7-load-balancing-differ</a></li>
<li><a href="https://www.nginx.com/resources/glossary/layer-7-load-balancing">https://www.nginx.com/resources/glossary/layer-7-load-balancing</a></li>
<li><a href="https://levelup.gitconnected.com/l4-vs-l7-load-balancing-d2012e271f56">https://levelup.gitconnected.com/l4-vs-l7-load-balancing-d2012e271f56</a></li>
</ul>
<p>[s]<br>
Guto</p>
<p>–</p>
<p>Este post é do tipo #MindNotes, entenda <a href="https://gutocarvalho.net/o-que-sao-mindnotes/">aqui</a>.</p>
<p>Se gostou manda um alo no twitter @gutocarvalho.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Entendendo o Dogpile Effect</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/entendendo-o-dogpile-effect/"/>
        <id>https://gutocarvalho.net/entendendo-o-dogpile-effect/</id>
            <category term="MindNotes"/>

        <updated>2022-02-10T19:40:18-03:00</updated>
            <summary>
                <![CDATA[
                    Se você está se inscrevendo para vagas de Cloud Engineer ou DevOps&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Se você está se inscrevendo para vagas de Cloud Engineer ou DevOps Engineer esse termo pode aparecer em sua entrevista. Eu confesso que hoje em dia eu não vejo a turma falando disso, parece uma questão superada do ponto de vista de engenharia de software, posts com esse termo datam de 2014 e achei alguns até mais antigos, no entando, parece que os recrutadores adoram perguntar isso, então bora lá entender o que é para saber responder :)</p>
<h3 id="o-que-é">O que é?</h3>
<p>Basicamente é o nome que se dá para aquele momento que os objetos em seu CACHE expiram e seu ambiente começa a tomar requests sem parar, frontend, backend e em especial sua database serão bastante exigidos pois seu CACHE praticamente sumiu. </p>
<p>Imagine centenas de milhares de processos fazendo requests no seu frontend, backend e indiretamente no seu banco de dados, tudo vai ficar bem lento, o load vai subir muito, especialmente se você não tiver uma estratégia de escalabilidade configurada, e isso pode gerar até uma indisponibilidade de suas APPs gerando um enorme prejuizo financeiro e de imagem.</p>
<h3 id="como-previnir-isso">Como previnir isso?</h3>
<p>Geralmente o pessoal usa os semáforos ou “semaphore lock”. Nesse caso, quando um valor expira o primeiro request a requisitar o valor gerar um tipo de LOCK, com isso o valor vai ser regerado, enquanto isso, caso outros processos solicitem o mesmo valor, estes vão receber um conteúdo mais antigo (stale content) até que o novo valor seja regerado e armazenado no cache. Quando o novo valor estiver no cache, o lock será removido e o conteúdo novo servido para os novos requests.</p>
<h3 id="mas-servir-conteúdo-antigo-ou-desatualizado-não-é-ruim">Mas servir conteúdo antigo ou desatualizado não é ruim?</h3>
<p>Acredite, ruim seria sua aplicação ficar indisponível, servir um conteúdo desatualizado por poucos segundos será o menor dos seus problemas.</p>
<h3 id="amarrando-as-pontas">Amarrando as pontas</h3>
<p>Cada stack ou linguagem tem ferramentas, técnicas métodos para implementar o semaphore lock, isso é algo a ser tratado em nível de código de aplicação – geralmente.</p>
<p>Essa é uma pergunta mais do ponto de vista de arquitetura e engenharia de software do que de infraestrutura, mas é importante entender o conceito e responder corretamente ao entrevistador.</p>
<h3 id="refs">Refs</h3>
<ul>
<li><a href="https://www.sobstel.dev/blog/preventing-dogpile-effect/">https://www.sobstel.dev/blog/preventing-dogpile-effect/</a></li>
</ul>
<p>[s]<br>
Guto</p>
<p>–</p>
<p>Este post é do tipo #MindNotes, entenda <a href="https://gutocarvalho.net/o-que-sao-mindnotes/">aqui</a>.</p>
<p>Se gostou manda um alo no twitter @gutocarvalho.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>CD.Foundation Ambassador 2022</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/cdfoundation-ambassador-2022/"/>
        <id>https://gutocarvalho.net/cdfoundation-ambassador-2022/</id>
            <category term="FalaGutera"/>

        <updated>2022-02-09T21:40:06-03:00</updated>
            <summary>
                <![CDATA[
                    <p>Eis que temos novidades, vem cá ver!</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Eis que temos novidades, vem cá ver!</p>

<p>Eu me inscrevi e fui selecionado para ser embaixador da CD.Foundation em 2022.</p>
<h2 id="toc_0">Ainda não conhece da CD.Foundation?</h2>
<p>CD significa Continuous Delivery, essa fundação tá embaixo da Linux Foundation e tem o objetivo de organizar, fomentar, promover e prover recursos para sustentar o crescimento de um ecosistema aberto de soluções para entrega contínua (CD) de software.</p>
<p>Vai lá conhecer</p>
<ul>
<li><a href="https://cd.foundation">https://cd.foundation</a></li>
<li><a href="https://twitter.com/CDeliveryFdn">https://twitter.com/CDeliveryFdn</a></li>
</ul>
<h2 id="toc_1">O que faz um embaixador?</h2>
<p>Basicamente vou trabalhar no apoio dos eventos da fundação, organizar meetups, apoiar a comunidade local, divulgar as atividades da CD e escrever muito conteúdo :)</p>
<p>Aqui explica certinho</p>
<ul>
<li><a href="https://cd.foundation/ambassador-program-overview-application">https://cd.foundation/ambassador-program-overview-application</a></li>
</ul>
<h2 id="toc_2">Quais as minhas expectativas?</h2>
<p>Espero poder ajudar a fundação a crescer e se estabelecer além de juntar a galera e escrever muito conteúdo :)</p>
<p>[s]<br>Guto<br><br><br>--- <br><br>Este post usa a tag #FalaGutera, entenda <a href="https://gutocarvalho.net/sobre-o-que-e-a-tag-falagutera/">aqui</a>.<br><br>Se gostou manda um alo no twitter @gutocarvalho.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Novos slides publicados</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/novos-slidedecks-publicados/"/>
        <id>https://gutocarvalho.net/novos-slidedecks-publicados/</id>
            <category term="MindNotes"/>

        <updated>2022-02-10T12:52:01-03:00</updated>
            <summary>
                <![CDATA[
                    <p>Só vem ver o conteúdo, tá bacana!</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Só vem ver o conteúdo, tá bacana!</p>

<p>Recentemente publiquei dois slidedecks interessantes sobre Service Mesh e EKS DR, foram pesquisas feitas para projetos que participei, talvez o conteúdo possa te ajudar :)<br><br><br><strong>Apresentação sobre investigação de DR para EKS</strong></p>
<div class="post__iframe"><iframe loading="lazy" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/89925d0e218844bf96aceb1791f0eacb" title="EKS DR Investigation" allowfullscreen="allowfullscreen" mozallowfullscreen="mozallowfullscreen" webkitallowfullscreen="webkitallowfullscreen" data-ratio="1.78343949044586"></iframe></div> <br><br><strong>Apresentação sobre comparação entre service meshes Istio e Linkerd</strong> <br><br><div class="post__iframe"><iframe loading="lazy" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/de8fd85d7de04f2da815b7475aba8dce" title="Service Mesh: Istio vs Linkerd" allowfullscreen="allowfullscreen" mozallowfullscreen="mozallowfullscreen" webkitallowfullscreen="webkitallowfullscreen" data-ratio="1.78343949044586"></iframe></div>
<p>[s]<br>Guto<br><br>---</p>
<p>Este post é do tipo #MindNotes, entenda <a href="https://gutocarvalho.net/o-que-sao-mindnotes/">aqui</a>.</p>
<p>Se gostou manda um alo no twitter @gutocarvalho.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Etiqueta do trabalho remoto</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/etiqueta-do-trabalho-remoto/"/>
        <id>https://gutocarvalho.net/etiqueta-do-trabalho-remoto/</id>
            <category term="FalaGutera"/>

        <updated>2022-02-10T12:20:37-03:00</updated>
            <summary>
                <![CDATA[
                    Se você está começando a trabalhar remoto ou quer trabalhar, tem dúvidas&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Se você está começando a trabalhar remoto ou quer trabalhar, tem dúvidas sobre como é a cultura, o modelo, a forma de se comunicar, dentre outras questões e principalmente se está curioso sobre o que fazer e o que não fazer em um trabalho remoto, esse post é para você!</p>
<p>Eu atuo remotamente em projetos desde 2013 e compilei aqui dicas valiosas para profissionais e empresas :)</p>
<p>Em especial para Cloud Engineers ingressando nesse modelo!</p>
<h2 id="o-que-uma-pessoa-nao-deve-fazer">O que uma pessoa NAO DEVE fazer</h2>
<h3 id="sobre-disponibilidade">Sobre disponibilidade</h3>
<p>Pega muito mal</p>
<ul>
<li>Dar perdido e não avisar</li>
<li>Não estar disponível nos horários combinados</li>
<li>Aparecer só nos horários das calls e sumir depois</li>
</ul>
<p>Apesar de ser um trabalho remoto, se horários foram combinados eles devem ser cumpridos por todos.</p>
<h3 id="em-relação-a-bloqueios">Em relação a bloqueios</h3>
<ul>
<li>Ter problemas de foco e não avisar ou pedir ajuda</li>
<li>Ficar bloqueado mais de 4 horas e nao pedir ajuda</li>
<li>Ficar bloqueado mais de 1 dia e não pedir ajuda</li>
</ul>
<p>Pedir ajuda é importante e saber quando pedir ajuda também.</p>
<h3 id="em-relação-seu-time">Em relação seu time</h3>
<ul>
<li>Não dedicar parte do seu tempo para ensinar aos mais novos</li>
<li>Não ajudar os novos membros com ISSUES e INCIDENTES</li>
<li>Não ajudar no mapeamento de melhorias e inovações</li>
<li>Pedir para trocar ONCALL sempre que é sua vez</li>
</ul>
<p>Fazer parte de um time significa ajudá-lo sempre que possível. Ajudar quem está chegando é educado, importante e humano de se fazer.</p>
<h3 id="em-relação-a-críticas-e-feedbacks">Em relação a críticas e feedbacks</h3>
<p>Criticar publicamente colegas ou superiores durante uma reunião <strong>regular</strong> pode gerar um climão que não vai afetar só você, isso geralmente acaba com o dia de todo mundo, devemos evitar ao máximo esse tipo de situação e agir com maturidade.</p>
<p>Tem alguma coisa que acha que possa melhorar na empresa?</p>
<ul>
<li>Organize a ideia e apresente no momento mais adequado como uma retrospectiva</li>
</ul>
<p>Tem um problema com algum colega? </p>
<ul>
<li>Chame ele para uma conversa one-a-one</li>
</ul>
<p>Não resolveu?</p>
<ul>
<li>Chame seu manager e peça ajuda.</li>
</ul>
<p>Tem problema com seu manager?</p>
<ul>
<li>Chame para conversa one-a-one, se precisar escale.</li>
</ul>
<p>Nem sempre conseguimos evitar conflitos, mas podemos ao menos tentar encaminhar questões de formas que surtam mais efeito em espaços e momentos mais adequados que respeitem o tempo e o trabalho de todos.</p>
<h3 id="não-se-preparar-adequadamente">Não se preparar adequadamente</h3>
<p>Pega mal</p>
<ul>
<li>Não se vestir de forma adequada para reuniões</li>
<li>Não abrir a camera nas reuniões, especialmente na sua vez</li>
<li>Não ter iluminação minimamente adequada para usar a camera</li>
</ul>
<p>Apesar de estarmos em casa, estamos trabalhando e precisamos nos preparar para isso da melhor forma que pudermos.</p>
<h3 id="em-relação-a-problemas-técnicos">Em relação a problemas técnicos</h3>
<p>Pega muito mal se acontece sempre</p>
<ul>
<li>Computador ou navegador ficar travando durante reuniões</li>
<li>Microfone ficar falhando quando você for falar</li>
<li>Webcam não funcionar na sua vez</li>
</ul>
<p>Problemas acontecem, nós entedemos, mas quando acontecerem você deve tomar ações para que eles não voltem a acontecer, especialmente ser for uma questão técnica que pode ser evitada com uma manutenção corretiva ou uma troca de equipamento ou dispositivo.</p>
<p>Se for um problema de configuração (software) peça ajuda para seu time, se for problema em um equipamento (hardware) fale com sua empresa, certamente ela vai te ajudar.</p>
<p>Em relação a abrir a câmera, entenda que já estamos no modelo remoto, geograficamente distribuídos, abrir a câmera, ao menos na sua vez de falar é educado e ajuda a reduzir a sensação de distânciamento e isolamento, recomendo.</p>
<h3 id="em-relação-ao-uso-de-chat">Em relação ao uso de chat</h3>
<p>Pega mal</p>
<ul>
<li>Usar o canal GENERAL como se fosse o OFFTOPIC</li>
<li>Usar o canal do time como se fosse OFFTOPIC</li>
<li>Fazer SPAM nos canais da empresa</li>
</ul>
<h3 id="sobre-atrasos-recorrentes">Sobre atrasos recorrentes</h3>
<p>Pega muito mal</p>
<ul>
<li>Não responder no chat quando pedirem sua opinião</li>
<li>Demorar muito para responder no chat quando te chamam</li>
<li>Chegar atrasado nas reuniões diárias ou regulares da empresa</li>
<li>Sempre esquecer de avisar que vai se atrasar ou furar uma call</li>
</ul>
<p>Se for atrasar avise, se não for participar avise, é remoto mas como já disse, se combinou horário e disponibilidade é preciso cumprir. Se atrasar constantemente, esquecer de avisar, isso pega mal, muito mal.</p>
<h3 id="comportamentos-técnicos">Comportamentos técnicos</h3>
<p>Pegal mal</p>
<ul>
<li>Não usar THREADS no CHAT, dificultando entender o contexto</li>
<li>Postar código no CHAT sem formatar ou usar highlight </li>
<li>Não versionar corretamente seu trabalho</li>
<li>Não ter cuidado com as mensagens de commit</li>
<li>Não ter cuidado no merge do seu código</li>
<li>Fazer commit com –FORCE em branchs de integração<ul>
<li>Isso pode apagar commits de seus coleguinhas</li>
</ul>
</li>
<li>Não comentar nas ISSUES seu progresso diário</li>
<li>Não criar ISSUES quando vai fazer algo</li>
<li>Não documentar processos que só você sabe fazer</li>
<li>Não documentar procedimentos que só você sabe fazer</li>
<li>Nao documentar ambientes que só você conhece</li>
<li>Usar ferramental que não é padrão do seu time</li>
<li>Fazer coisas manualmente em um time de automação</li>
<li>Não avisar o time que fez algo manualmente</li>
</ul>
<p>Lembre-se que você não trabalha sozinho e todos precisam entender o que você está falando, fazendo e também o que fez. É preciso tomar cuidado para que alguma alteração sua não afete o trabalho de outro colega e documente tudo que puder, isso ajuda a todos.</p>
<h2 id="o-que-uma-pessoa-deve-fazer-sempre">O que uma pessoa DEVE FAZER SEMPRE</h2>
<ul>
<li>Avisar no canal do seu time seu progressor diariamente</li>
<li>Sempre usar THREADS nos chats :)</li>
<li>Manter assuntos OFFTOPIC no canal OFFTOPIC :)</li>
<li>Pedir ajudar sempre que precisar, sem medo</li>
<li>Ser honesto sobre qualquer situação ou problema</li>
<li>Estar sempre disponível no horário combinado</li>
<li>Participar das reuniões que for convidado</li>
<li>Estar presente e se fazer presente para o time e para a empresa</li>
<li>Ajudar o time como um todo, especialmente se estiver livre</li>
<li>Ajudar os novos membros do time a ter o mesmo entendimento</li>
<li>Atuar na solução de conflitos ou problemas se houver</li>
<li>Compartilhar seu conhecimento sempre que possível</li>
</ul>
<h2 id="o-que-a-empresa-nao-deve-fazer">O que a empresa NAO DEVE FAZER</h2>
<p>Pega mal</p>
<ul>
<li>Pedir para instalar software de vigilância</li>
<li>Demonstrar desconfiança excessiva com seus colaboradores</li>
<li>Ficar monitorando para ver se a pessoa está na frente do computador ou não</li>
<li>Pedir para logar cada atividade, em especial se não for um contrato por horas</li>
<li>Atravessar o manager e tentar resolver algo direto com alguém do time dele</li>
</ul>
<p>Pega mal e não faz sentido</p>
<ul>
<li>Reclamar de problemas que o colaborador nao pode resolver<ul>
<li>Problemas no fornecimento de energia</li>
<li>Problemas na disponibilidade de sinal internet</li>
</ul>
</li>
</ul>
<p>Alguns colaboradores não moram em grandes centros e podem ter que conviver com falta de energia que geralmente ocasiona em falta de sinal de internet por tabela. É claro que o colaborador pode tentar mitigar com uso de nobreaks e até tentar usar o 4g se estiver disponível, mas são coisas que fogem do controle e poder de decisão do colaborador. Nesse caso o bom senso é o melhor caminho, foco nas entregas do colaborador e não nos problemas com provedores de serviços públicos que ele tem. Ele preferia não ter, acredite.</p>
<h2 id="o-que-a-empresa-deve-fazer-sempre">O que a empresa DEVE FAZER SEMPRE</h2>
<p>Pega bem!</p>
<ul>
<li>Agir com respeito sempre</li>
<li>Demonstrar confiança nos líderes e colaboradores</li>
<li>Estimular e proporcionar a autonomia dos colaboradores</li>
<li>Estimular e garantir a autonomia dos líderes para com seus times</li>
<li>Oferecer recursos adequados para o trabalho de todos</li>
<li>Proprocionar um ambiente seguro, humano e livre de assédio</li>
<li>Dar autonomia para o líder/manager cuidar dos horários do time</li>
<li>Focar em valor gerado e nao em relógio de ponto</li>
</ul>
<p>[s]<br>
Guto</p>
<p>— </p>
<p>Este post usa a tag #FalaGutera, <a href="https://gutocarvalho.net/sobre-o-que-e-a-tag-falagutera/">entenda</a> aqui.</p>
<p>Se gostou manda um alo no twitter <a href="https://twitter.com/gutocarvalho">@gutocarvalho</a>.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>TI Remota em 2022 entenda!</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/ti-remota-em-2022-entenda/"/>
        <id>https://gutocarvalho.net/ti-remota-em-2022-entenda/</id>
            <category term="FalaGutera"/>

        <updated>2022-02-09T21:51:41-03:00</updated>
            <summary>
                <![CDATA[
                    Vindo aqui para tentar explicar o atual momento sobre vagas remotas, presenciais&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Vindo aqui para tentar explicar o atual momento sobre vagas remotas, presenciais e salários em TI.</p>
<p>O foco aqui é o mercado de TI, seus profissionais e gestores.</p>
<p>Nem preciso dizer o quanto privilegiados nós somos em nossa profissão e em nossa vida.</p>
<h2 id="números--reflexões">Números &amp; Reflexões</h2>
<p>Estamos entrando no terceiro ano de COVID e ainda está tudo muito longe de acabar.</p>
<p>Até hoje 2022-01-08 temos cerca de <strong>SEISCENTOS E TRINTA E TRÊS MIL</strong> mortos de COVID no Brasil.</p>
<p>Mais de <strong>26 milhões</strong> de pessoas infectadas – do que se foi rastreado e registrado – no Brasil.</p>
<p>Mais de <strong>60 mil casos</strong> registrados por dia, em média.</p>
<p>A Covid chegou em minha família, levou o Tio de meus filhos.</p>
<p>A Covid me infectou mas eu consegui me recuperar – graças à vacina, mas muita gente não.</p>
<p>Muitos ficaram com sequelas.</p>
<p>Muitos perderam pessoas importantes.</p>
<p>Isso setado, vamos em frente!</p>
<h2 id="trabalho-remoto-antes-da-covid">Trabalho remoto antes da COVID</h2>
<p>Até antes da COVID o trabalho remoto era raro no Brasil, poucas empresas praticavam, muitos gestores não achavam que seria possível ou tão produtivo quanto estar frente a frente.</p>
<h2 id="trabalho-remoto-no-início-da-covid-2020">Trabalho remoto no início da COVID (2020)</h2>
<p>Foi que foi, funcionou tão bem quanto, até melhor, especialmente em profissões que não fazem atendimento presencial.</p>
<p>No caso da TI foi natural, afinal tínhamos a tecnologia que permitia que todos trabalhassem remotamente, com nenhum ou pouco prejuízo se comparado com o presencial.</p>
<h2 id="trabalho-remoto-1-ano-depois-da-covid-2021">Trabalho remoto 1 ano depois da COVID (2021)</h2>
<p>Mesmo com algum barulho de uma fatia de gestores, se estabeleceu e se firmou em muitas áreas.</p>
<h2 id="trabalho-remoto-2-anos-depois-da-covid-2022">Trabalho remoto 2 anos depois da COVID (2022)</h2>
<p>Vagas remotas se tornaram realidade no mundo todo em diversas profissões.</p>
<p>Na TI é quase o novo normal.</p>
<h2 id="realidade-para-trabalho-remoto-a-partir-de-2022">Realidade para trabalho remoto a partir de 2022</h2>
<p>Pessoas não querem voltar para o presencial.</p>
<p>Vagas remotas são o novo normal.</p>
<p>Quem quiser trabalhar presencial tem vaga e até candidatos.</p>
<p>Quem quiser trabalhar remoto tem vaga <strong>SOBRANDO</strong> e <strong>FALTAM</strong> candidatos.</p>
<h2 id="por-que-pessoas-de-ti-não-querem-mais-o-presencial">Por que pessoas de TI não querem mais o presencial?</h2>
<p>Sendo rápido e rasteiro:</p>
<ul>
<li>A COVID ainda tá bombando e ainda vai bombar</li>
<li>As pessoas tem medo de morrer, e faz sentido já que a COVID mata</li>
<li>As pessoas tem medo de ficar com sequelas, mesmo que sobrevivam a COVID</li>
<li>As pessoas podem infectar seus familiares e causar a morte deles</li>
</ul>
<p>Sabemos que:</p>
<ul>
<li>As vacinas funcionam e reduzem a gravidade da infecção, mas ainda é possível se infectar</li>
<li>O nível de imunidade varia em cada pessoa, pode ser uma infecção leve ou não</li>
<li>As pessoas podem ou não ter sequelas e ninguém tá afim de pagar para ver</li>
</ul>
<p>Com isso podemos dizer que:</p>
<ul>
<li>Trabalhar em casa é mais seguro, com toda certeza.</li>
</ul>
<p>Mas tem algo mais? Por que é melhor trabalhar em casa?</p>
<ul>
<li>Nao precisa se locomover, pegar trânsito, gastar gasolina ou pernas</li>
<li>Ganhamos o tempo que a gente se locomovia e temos menos estresse</li>
<li>É mais seguro do que ficar andando nas ruas, metro, onibus, edifícios</li>
<li>Deixamos de gastar dinheiro para nos alimentar na rua e podemos comer melhor</li>
<li>O ambiente é mais confortável para trabalhar</li>
<li>Podemos preparar e personalizar nosso cantinho do nosso jeito</li>
<li>Usar nosso banheiro nao tem preço :P</li>
<li>Se você não se sentir bem, estará seguro e acolhido, e estará no melhor lugar para se recuperar e receber a ajuda de que precisa</li>
</ul>
<p>Com tudo isso temos </p>
<ul>
<li>Mais qualidade de vida</li>
<li>Mais tempo disponível</li>
<li>Menos pressão com horários e engarrafamentos</li>
<li>Mais proximidade dos pets e/ou familiares</li>
</ul>
<p>E há quem arrisque dizer que:</p>
<ul>
<li>As pessoas em casa são mais produtivas (meu caso)</li>
<li>As pessoas em casa são mais felizes do que no escritório (meu caso)</li>
</ul>
<p>Deu para entender porque muita gente prefere o home office?</p>
<h2 id="e-o-salário-presencial-tá-mais-caro-que-o-remoto">E o salário presencial tá mais caro que o remoto?</h2>
<p>Deixa eu te contar uma coisa, trabalhar presencial sempre pagou mais que o remoto, antes da COVID era o praxe. Agora na COVID a prática continua, contudo, arrisco dizer que continua sim, mas mudou de contexto.</p>
<p>E qual o motivo ou novo contexto?</p>
<ul>
<li>Presencialmente as pessoas podem se infectar</li>
<li>Em caso de infecção podem morrer</li>
<li>Caso não morram, podem ter sequelas da infecção</li>
<li>As pessoas podem infectar seus familiares e causar a morte deles</li>
<li>Caso os familiares não morram, podem ter sequelas</li>
</ul>
<p>Isso acredito que esclarece a razão do pessoal querer ficar em casa.</p>
<ul>
<li>O <strong>RISCO</strong> é muito grande.</li>
</ul>
<p>Trabalhar presencial durante uma pandemia requer compensação desse risco, já que no caso da TI, em sua maioria dos casos <strong>não é necessário estar na mesma sala para fazer o trabalho</strong>.</p>
<h2 id="eu-gestor-não-concordo-com-nada-disso">Eu gestor não concordo com nada disso</h2>
<p>Hey gestor, empreeendedor, recrutador, se você não concorda, tudo bem, é seu direito, contudo entenda:</p>
<ul>
<li><p>Ninguém vai colocar a sua vida em risco para você ou sua empresa lucrar.</p>
</li>
<li><p>Ninguém vai colocar a vida de seus entes queridos em risco para você ou sua empresa lucrar.</p>
</li>
</ul>
<p>Obviamente não são todos os brasileiros que podem fazer isso, muita gente não tem escolha, aliás, na 
grande maioria das profissões de nosso país as pessoas não tem essa escolha.</p>
<p>Já na TI o pessoal está se posicionando para mudar isso, e olha, <strong>faz todo o sentido</strong>.</p>
<p>Veja, eu sei que você provavelmente voce vai preencher a vaga, mas não com aquela(e) profissional talentosa(o) que precisava contratar, certamente vai preencher com alguém que não tem muita escolha e precisa daquilo naquele momento.</p>
<h2 id="tá-difícil-contratar-e-reter">Tá difícil contratar e reter?</h2>
<p>Isso tem acontecido e está muito mais comum do que se imagina, recrutadores estão ralando muito, tem muita vaga, muita mesmo, o mercado está aquecido, em alguns momento até insano. Ainda assim, <strong>o pessoal tá querendo segurança pra si e para sua família, então não se engane.</strong></p>
<p>Quer reter talento?</p>
<ul>
<li>Ofereça vagas remotas.</li>
</ul>
<p>Quer oferecer qualidade de vida?</p>
<ul>
<li>Ofereça vagas remotas.</li>
</ul>
<p>Quer um time feliz e produtivo?</p>
<ul>
<li>Ofereça vagas remotas.</li>
</ul>
<p>Quer contratar gente competente?</p>
<ul>
<li>Ofereça vagas remotas.</li>
</ul>
<p>Quer expandir?</p>
<ul>
<li>Ofereça vagas remotas.</li>
</ul>
<h2 id="mas-isso-é-regra">Mas isso é regra?</h2>
<p>Nem sempre, remoto não é para todo mundo e nem para tudo, mas serve para boa parte.</p>
<h3 id="sobre-o-remoto">Sobre o remoto</h3>
<p>Tem gente que não gosta</p>
<p>Tem gente que não quer</p>
<p>Tem gente que não consegue</p>
<p>Tem gente que não tem condições para trabalhar em casa devido a ruídos</p>
<p>Tem gente que não tem condições para trabalhar em casa devido a internet</p>
<p>Tem gente que não tem condições para trabalhar em casa devido a falta de equipamento</p>
<p>Tem várias razões e motivos para não se trabalhar em casa, eu não dúvido ou questiono</p>
<p>Exceções sempre vão existir, o que eu estou tentando mostrar é que existe um movimento – e na minha opinião sem volta – acontecendo de pessoas que desejam trabalhar em regime de home office, e isso provavelmente vai ser o novo normal e o novo padrão na TI para os próximos anos.</p>
<p>Ainda assim, exceções vão existir, listo algumas áreas que TI precisam de atendimento presencial ou pelo menos semi-presencial.</p>
<ul>
<li>Suporte a sistemas médicos de TI</li>
<li>Suporte a Serviços Públicos e Governamentais de TI</li>
<li>Suporte a equipamentos e hardware de TI</li>
<li>Suporte a usuário</li>
</ul>
<p>Dentre muitos outros, esses foram só alguns exemplos que eu lembrei agora.</p>
<h2 id="e-como-minha-empresa-se-adapta-a-essa-nova-realidade">E como minha empresa se adapta a essa nova realidade?</h2>
<h3 id="segue-o-fluxo">Segue o fluxo</h3>
<p>Hoje as empresas precisam se adaptar ao novo tempo e pensar em funcionar em diversos modelos, tais como:</p>
<ul>
<li>presencial</li>
<li>semi-presencial</li>
<li>remoto</li>
</ul>
<h3 id="respeito-acima-de-tudo">Respeito acima de tudo</h3>
<p>Recrutadores/empresários precisam entender que nao é mimimi ou estrelismo preferir remoto.</p>
<p>Recrutadores/empresários precisam entender que não é mimimi ou estrelismo pagar mais para o presencial, afinal não é seguro, o risco de infecção é altíssimo e a qualidade de vida não é a mesma.</p>
<h3 id="com-saúde-não-se-brinca">Com saúde não se brinca</h3>
<p>E se for levar para presencial, turbine o plano de saúde, banque 100% e estenda para esposa/marido e filhos pelo menos, visto que a COVID não escolhe, ela abocanha quem estiver na frente e o contágio – em especial da omicron – é absurdamente fácil.</p>
<h3 id="como-ir-para-o-remoto-de-forma-responsável-e-justa">Como ir para o remoto de forma responsável e justa?</h3>
<p>Pense em adotar ferramentas que funcionem na nuvem (SaaS)</p>
<ul>
<li>Ferramentas de CHAT (Slack, MatterMost)</li>
<li>Ferramentas de Videoconferência (Zoom, Meet)</li>
<li>Ferramentas de Office (Google Workspace ou Office 365)</li>
<li>Ambiente de testes e desenvolvimento na nuvem (AWS, GCP, Oracle)</li>
</ul>
<p>Adote processos e métodos para que seu time funcione remotamente (Agile, Scrum, Kanban, Lean)</p>
<ul>
<li>Mantenha Reuniões diárias entre times e líderes</li>
<li>Adote Planejamento semanal, quinzenal ou mensal</li>
<li><strong>Trabalhe mais com prazos e projetos</strong> do que com controle de horário</li>
<li>Acompanhe as atividades via sistemas que te possibilitem isso</li>
<li>Adote revisões regulares de projetos com curtas apresentaçoes de cada time</li>
<li>Adote a prática do one-a-one com seus colaboradores</li>
</ul>
<p>O que pega muito mal?</p>
<ul>
<li>Ficar controlando tempo da pessoa em frente ao computador</li>
<li>Instalar software de vigilância no computador do colaborador</li>
<li>Pedir para logar tempo de cada atividade, isso deve ser usado só se contrato for por horas</li>
<li>Microgerenciamento de pessoas ou times</li>
</ul>
<p>O que é legal?</p>
<ul>
<li>Respeito</li>
<li>Confiança</li>
<li>Estimular autonomia da pessoa colaboradora</li>
<li>Criar um ambiente seguro e livre de assédio</li>
<li>Dar autonomia para o lider/manager cuidar dos horários do time</li>
<li>Focar em valor agregado e nao em relógio de ponto</li>
</ul>
<h3 id="como-apoiar-seus-colaboradores">Como apoiar seus colaboradores?</h3>
<p>Algumas empresas tem oferecido:</p>
<ul>
<li>Ajuda de custo com internet</li>
<li>Ajuda de custo com equipamentos como:<ul>
<li>Webcam</li>
<li>Microfone</li>
<li>Monitores</li>
<li>Teclado (Mecânico)</li>
<li>Mouse Vertical (Ergonômico)</li>
</ul>
</li>
</ul>
<p>Quais experiências boas temos visto?</p>
<ul>
<li>Empresa doar cadeira confortável (gamer)</li>
<li>Empresa doar ar-condicionado em regiões muito quentes</li>
<li>Empresa pagar a fatura de internet</li>
</ul>
<p>Algumas empresas preferem dar um budget inicial para que o colaborador monte esse “SETUP”.</p>
<p>Tem muitas iniciativas interessantes ocorrendo e funcionando bem.</p>
<h3 id="e-quais-os-benefícios-para-minha-empresa">E quais os benefícios para minha empresa?</h3>
<p>Redução de custos para a empresa como:</p>
<p>Energia</p>
<ul>
<li>Reduzindo gente no escritório você reduz sua conta de energia afinal serão menos computadores e unidades de ar-condicionado ligados</li>
</ul>
<p>Internet</p>
<ul>
<li>Com pouca gente no escritório você não precisa de links de internet tão caros ou rápidos</li>
</ul>
<p>Mobiliário</p>
<ul>
<li>O mobiliário pode ser reduzido já que não terá tantos funcionários no local</li>
</ul>
<p>Aluguel</p>
<ul>
<li>Voce pode ir para uma sede menor e mobiliar a nova sede com foco em reuniões, estilo co-working e atendimento de clientes, isso reduzirá o custo do aluguel e custos indiretos e diretos com o escritório.</li>
</ul>
<p>Seguro</p>
<ul>
<li>Com sala menor, seguro menor e risco menor do seu patrimônio</li>
</ul>
<p>Datacenter na nuvem</p>
<ul>
<li>Acabar com seu datacenter local e colocar na nuvem reduz diversos custos como energia, links de internet, atualização de equipamentos, operação, monitoramento dentre muitos outros custos.</li>
</ul>
<p>Menor custo de expansão do time</p>
<ul>
<li>Aumentar o time não significa mais aumentar ou mudar de escritório.</li>
</ul>
<p>Ganhos para o time:</p>
<ul>
<li>Time mais motivado</li>
<li>Time mais produtivo</li>
<li>Time seguro e saudável</li>
<li>Redução do número de licenças médicas</li>
<li>Projetos em dia</li>
</ul>
<p>Ganhos para a empresa:</p>
<ul>
<li>Retenção de talentos</li>
<li>Empresa atrativa para novos talentos</li>
</ul>
<h2 id="concluindo">Concluindo</h2>
<p>Confia que funciona, tem centenas de milhares de cases que comprovam.</p>
<p>Eu mesmo já fundei 2 empresas que seguem firmes até hoje e funcionam desde sempre – dia zero – no modelo remoto.</p>
<p>Espero que a informação ajude quem precisa de ajuda :)</p>
<p>Compartilhe com as pessoas que precisam!</p>
<p>[s]<br>
Guto</p>
<p>— </p>
<p>Este post usa a tag #FalaGutera, <a href="https://gutocarvalho.net/sobre-o-que-e-a-tag-falagutera/">entenda</a> aqui.</p>
<p>Se gostou manda um alo no twitter <a href="https://twitter.com/gutocarvalho">@gutocarvalho</a>.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>30 percepções sobre TI em 2022</title>
        <author>
            <name>Guto Carvalho</name>
        </author>
        <link href="https://gutocarvalho.net/trinta-percepcoes-sobre-ti-em-2022/"/>
        <id>https://gutocarvalho.net/trinta-percepcoes-sobre-ti-em-2022/</id>
            <category term="FalaGutera"/>

        <updated>2022-02-08T19:50:18-03:00</updated>
            <summary>
                <![CDATA[
                    <p>Pensamentos claros, mandando a real para quem quiser ler.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Pensamentos claros, mandando a real para quem quiser ler.</p>

<p>Post especial para quem está começando, no meio do caminho e também para gestores antenados.<br><br><strong>1.</strong> Pedir ajuda não é sinal de fraqueza;<br><br><strong>2.</strong> Ajudar outra pessoa não é um problema e sim um ato de gentileza, respeito e empatia;<br><br><strong>3.</strong> Cada um tem experiências e conhecimentos distintos em níveis distintos, é isso que torna sua equipe rica e diversa;<br><br><strong>4.</strong> Compartilhar conhecimento faz todos crescerem juntos e faz o time se tornar mais forte e unido;<br><br><strong>5.</strong> Respeito não se combina, respeito se tem, não é opcional;<br><br><strong>6.</strong> Empatia tem que se ter sempre, em todas as direções possíveis;<br><br><strong>7.</strong> Tentar entender um problema e ajudar a resolver é mais eficiente e humano do que apontar o problema e sumir;<br><br><strong>8.</strong> Criar um ambiente saudável, seguro e profissional é responsabilidade de todos;<br><br><strong>9.</strong> Não se estimula competição entre pessoas do mesmo time, e também não se deve comparar hard skills, soft skills e personalidades, somos todos diferentes, cada um com suas experiências, qualidades e aprendizados;<br><br><strong>10.</strong> Colaboração se estimula, e deve-se praticar sempre;<br><br><strong>11.</strong> Controle excessivo só gera perturbação no time ao invés de ajudar;<br><br><strong>12.</strong> É preciso ter equilíbrio entre as necessidades da empresa e as necessidades de seus colaboradores;<br><br><strong>13.</strong> Uma empresa é formada de pessoas, sem pessoas não há empresa;<br><br><strong>14.</strong> Se a empresa quer ser bem sucedida ela tem que se preocupar com o bem estar do seu time, tanto quanto com o seu sucesso. Sem um time vocês não vão entregar nada, sem entregas não tem sucesso;<br><br><strong>15.</strong> Estenda essa cortesia – preocupação – para os familiares em primeiro grau da pessoa que trabalha contigo, ninguém trabalha bem sabendo com o filho/filha/esposa/pai/mãe/pet está mal;<br><br><strong>16.</strong> Ameaçar pessoas, mesmo que de forma subliminar é sinal de falta de capacidade de liderar e mostra a completa pobreza de compreensão de como gerir uma time e falta de empatia com seres humanos;<br> <br><strong>17.</strong> O gestor deve ser direto, honesto e agir com respeito em qualquer situação;<br><br><strong>18.</strong> Espera-se em 2022 uma cultura centrada em pessoas, para que essas pessoas juntas possam ajudar sua empresa a alcançar seus objetivos;<br><br><strong>19.</strong> Aquela cultura focada primeiro no lucro da empresa, depois na satisfação dos clientes e por último nos colaboradores é um mindset de empresas dos anos 80/90, não funciona mais e maioria dos profissionais não aceita fazer parte de lugares assim, é hora de mudar ou fechar;<br><br><strong>20.</strong> Pessoas não são máquinas ou ferramentas que estão ali só para fazer seu cliente feliz. Pessoas são pessoas e devem ser tratadas e respeitadas como tal;<br><br><strong>21.</strong> Se trabalha remoto tente manter uma sala de vídeo aberta para se sentir próximo dos demais, como se fosse a mesa do lado, converse com eles além da daily, além da review, além da retrospectiva, converse sempre que puder. Já estamos em modelo remoto onde a sensação de distância pode ser maior, portanto, manter contato e conversar regularmente é essencial;<br><br><strong>22.</strong> Gestor, One-a-One só funciona se existe confiança, se não houver não adianta que ninguém vai ser abrir e conversar;<br><br><strong>23.</strong> Gestor, One-a-One não é só para o funcionário dar feedback que não pode dar em reunião pública, ele tá ali para aprender a confiar em você e você está lá para ajudá-lo a crescer como pessoa, profissional e principalmente para construir laços;<br><br><strong>24.</strong> Alguns usam One-a-One apenas para falar de trabalho e como crescer na empresa ou profissão, outros evitam falar de trabalho, depende da empresa e de como se aplica, no final, o importante é ter equilíbrio e saber que o objetivo é construir confiança, laços e apoiar as pessoas do seu time e empresa;<br><br><strong>25.</strong> No final do dia você vai ver que tudo está relacionado as pessoas. Entenda que a forma como nós nos relacionamos e colaboramos é reflexo de como a empresa funciona ou não. Como eu já disse e repito, empresas são formadas por pessoas, e sem pessoas empresas não existem e não funcionam.<br><br><strong>26.</strong> Pessoas não são recursos, pare de chamar pessoas de recursos, mude o nome do seu departamento de "recursos humanos" para "departamento de pessoas", esse é o primeiro passo, o segundo é enxergá-los como colaboradores essenciais para seu sucesso e não como meros empregados transitórios;<br><br><strong>27.</strong> Pare de dizer que colaboradores tem que ralar como se fosse o dono da empresa, eu só vou concordar com isso se eles forem sócios e ganharem a mesma coisa. Cada um no seu quadrado, cada com na sua responsabilidade, sem loucura ou devaneios, foco no profissionalismo e nada além;<br><br><strong>28.</strong> O maior e mais importante princípio dentro de qualquer empresa chama-se “RESPEITO”. Tudo se constrói em volta disso.<br><br><strong>29.</strong> O segundo mais importante chama-se EMPATIA, sem ela, sua empresa é oca.<br><br><strong>30.</strong> As pessoas não precisam gostar de você, e nem você precisa gostar de todo mundo da empresa, mas todos precisam se respeitar, colaborar e se ajudar, e se der para gostar, ai é melhor ainda :)<br><br>[s]<br>Guto<br><br>--- <br><br>Este post usa a tag #FalaGutera, entenda <a href="https://gutocarvalho.net/sobre-o-que-e-a-tag-falagutera/">aqui</a>.<br><br>Se gostou manda um alo no twitter @gutocarvalho.</p>
            ]]>
        </content>
    </entry>
</feed>
